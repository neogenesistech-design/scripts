// Variáveis de controle
let reconnectInterval = null;
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;  // Limite de tentativas de reconexão
let socket; // Variável para o objeto WebSocket, necessária para que login e outras funções a acessem.

// Função para conectar ao servidor WebSocket
function connect(callbackOnConnected) {
    const socket = new WebSocket("wss://bansystem.onrender.com/chat");


    socket.onopen = () => {
        console.log("Conectado ao servidor WebSocket.");
        reconnectAttempts = 0;  // Resetando tentativas de reconexão

        // Se o callback foi fornecido, chama ele após a reconexão bem-sucedida
        if (callbackOnConnected && typeof callbackOnConnected === "function") {
            callbackOnConnected(socket);
        }
    };

    socket.onmessage = (event) => {
        // Quando uma mensagem do servidor for recebida

        if (event.data.startsWith("{")) {
            const data = JSON.parse(event.data);
            console.log("Mensagem recebida do servidor:", data);

            // Chamando a função onData para tratar os dados recebidos
            if (typeof onData === "function") {
                onData(data);
            }
        } else {
           if (window.broadCast){
               window.broadCast(event.data);

           }
            
        }

    };

    socket.onerror = (error) => {
        console.error("Erro de WebSocket:", error);
    };

    socket.onclose = () => {
        console.log("Conexão fechada.");
        window.connectedSocket = false;
        if (window.disconnectedSocket) {
            window.disconnectedSocket();

        }
        handleReconnect(callbackOnConnected);
    };

    return socket;
}

// Função para tentar reconectar automaticamente
function handleReconnect(callbackOnConnected) {
    if (reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts += 1;
        console.log(`Tentando reconectar... (Tentativa ${reconnectAttempts} de ${maxReconnectAttempts})`);

        // Tenta reconectar após um intervalo de 3 segundos
        setTimeout(() => {
            connect(callbackOnConnected);  // Tenta reconectar
        }, 3000);  // Reconexão a cada 3 segundos
    } else {
        console.log("Número máximo de tentativas de reconexão atingido.");
    }
}

// Função para fazer o login do usuário
function login(id, name) {
    const payload = {
        type: "login",
        id: id, // Este é o 'login'
        name: name // Este é o 'nome'
    };
    
    // --- ALTERAÇÃO AQUI: CAPTURAR E IMPRIMIR O PAYLOAD DE FORMA GRANDE NO CONSOLE ---
    const bigStyle = 'font-size: 24px; font-weight: bold; color: white; background: #007bff; padding: 5px 10px; border-radius: 5px;';
    const dataStyle = 'font-size: 20px; color: #17a2b8; font-weight: bold;';
    
    console.log(
        `%cENVIANDO PAYLOAD LOGIN%c\nNome: ${payload.name} \nLogin (ID): ${payload.id} \nTipo: ${payload.type}`, 
        bigStyle, 
        dataStyle
    );
    // ---------------------------------------------------------------------------------
    
    socket.send(JSON.stringify(payload));
    console.log(`Tentando login com ID: ${id} e nome: ${name}`);
}

// Função para obter a lista de usuários conectados
function getUserList() {
    const payload = {
        type: "getList"
    };
    socket.send(JSON.stringify(payload));
    console.log("Solicitando lista de usuários conectados...");
}

// Função para atualizar o nível e as coordenadas (x, y)
function updateLevel(level, x, y) {
    const payload = {
        type: "updateLevel",
        level: level,
        x: Number.parseFloat(x),
        y: Number.parseFloat(y)
    };
    socket.send(JSON.stringify(payload));
    console.log(`Atualizando level: ${level}, x: ${x}, y: ${y}`);
}


function updateProps(props) {
    const payload = {
        type: "props",
        props: props
    };
    socket.send(JSON.stringify(payload));
    console.log(`Atualizando propriedades: ${props.join(", ")}`);
}

// Função para enviar uma mensagem para um usuário específico
function sendMessageToUser(userId, message) {
    const payload = {
        type: "adminMessage",
        userId: userId,
        message: message
    };
    socket.send(JSON.stringify(payload));
    console.log(`Enviando mensagem para o usuário com ID: ${userId}`);
}

// Função para enviar uma mensagem para todos os usuários
function sendMessageToAll(message) {
    const payload = {
        type: "broadcastMessage",
        message: message
    };
    socket.send(JSON.stringify(payload));
    console.log("Enviando mensagem para todos os usuários.");
}

// Função para fechar a conexão com o servidor WebSocket
function closeConnection() {
    socket.close();
    console.log("Conexão com o servidor fechada.");
}

// Função onData (a ser definida pelo cliente)
// Essa função vai processar a mensagem recebida do servidor
function onData(data) {
    // Aqui o cliente pode processar o conteúdo de `data` como quiser
    console.log("Função onData chamada com dados:", data);

    // Exemplo de como lidar com diferentes tipos de dados recebidos:
    if (data.type === 'getList') {
        console.log("Lista de usuários conectados:", data);
    } else if (data.type === 'adminMessage') {
        console.log(`Mensagem do administrador: ${data.message}`);
    } else if (data.type === 'updateLevel') {
        console.log(`Usuário ${data.userName} atualizou o level para ${data.level}, x: ${data.x}, y: ${data.y}`);
    } else {
        console.log("Tipo de mensagem desconhecido:", data);
    }


    window.onData(data)
}

// Função para iniciar a conexão e tentar reconectar
function startConnection(callbackOnConnected) {
    socket = connect(callbackOnConnected);
}

// Exemplo de uso:

// Callback para ser executado assim que a conexão for estabilizada


// Inicia a conexão, fornecendo o callback para quando a conexão for estabilizada

// // Exemplo de login (id e nome do usuário)
// // login("12345", "João");

// // Solicitar lista de usuários conectados
// // getUserList();

// // Atualizar nível e coordenadas
// // updateLevel("2", 10.5, 20.3);

// // Enviar mensagem para um usuário específico
// // sendMessageToUser("12345", "Oi João, você está online!");

// // Enviar mensagem para todos os usuários
// // sendMessageToAll("Mensagem para todos os usuários!");

// Fechar a conexão com o servidor
// // closeConnection();
