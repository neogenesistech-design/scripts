setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT COMPLETO v19 - LAYOUT FIXO FUNCIONAL COM TRADUTOR
    // Este é o formato de UI que funciona, com a lógica de tradução e um novo botão de teste.
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function getMainActivity() {
        const activityThread = Java.use("android.app.ActivityThread").sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    let logContainer = null;
    let logScrollView = null;
    let isHookEnabled = false;

    function addLog(text) {
        Java.scheduleOnMainThread(() => {
            if (!logContainer) return;
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const logEntry = classLoader.TextView.$new(mainActivity);
            logEntry.setText(classLoader.String.$new(text));
            logEntry.setTextColor(classLoader.Color.parseColor("#00FF00"));
            logEntry.setTextSize(12);
            logContainer.addView(logEntry);
            logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random().toString(36).substring(2),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { logScrollView.fullScroll(130); } }
            }).$new());
        });
    }

    function clearLog() {
        Java.scheduleOnMainThread(() => {
            if (logContainer) logContainer.removeAllViews();
        });
    }

    // --- ÁREA DE ESTUDO ---
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6;
    let currentLevelPtr = null; // Variável global para guardar um ponteiro importante
    // ----------------------

    function translateArgument(argPtr) {
        if (argPtr.isNull()) return "Ponteiro Nulo (0x0)";
        try {
            const str = argPtr.readCString(50);
            if (str && str.length > 2 && /^[a-zA-Z0-9\s_.-]+$/.test(str)) {
                return `String: "${str}"`;
            }
        } catch (e) {}
        const floatVal = argPtr.readFloat();
        if (Math.abs(floatVal) > 0.001 && Math.abs(floatVal) < 100000) {
            return `Float: ${floatVal.toFixed(4)}`;
        }
        const intVal = argPtr.toInt32();
        if (intVal !== 0) return `Ponteiro/Int: ${argPtr}`;
        return "0";
    }

    // --- FUNÇÃO DE TESTE ---
    function testarFuncaoPutExplosion() {
        if (!currentLevelPtr) {
            addLog("[!] Erro: Nenhum 'level pointer' capturado ainda. Interaja no jogo primeiro.");
            return;
        }
        addLog("[+] Testando a função 'putExplosion'...");
        try {
            const putExplosionPtr = Module.findExportByName(targetLib, "_ZN10zF9VgaBKxR10tMaombuGXrEdddii");
            const putExplosion = new NativeFunction(putExplosionPtr, 'void', ['pointer', 'double', 'double', 'double', 'int', 'int']);
            
            const activePlayerPtr = Module.findExportByName(targetLib, "dkCHgaGRiF").readPointer();
            const getlocalx = new NativeFunction(Module.findExportByName(targetLib, "_ZNK10W6NzgawMJy10Qi2VgaCyrREv"), "double", ["pointer"]);
            const getlocaly = new NativeFunction(Module.findExportByName(targetLib, "_ZNK10W6NzgawMJy10qCgWga1ADREv"), "double", ["pointer"]);

            const playerX = getlocalx(activePlayerPtr);
            const playerY = getlocaly(activePlayerPtr);

            // Chama a função com os argumentos necessários
            putExplosion(currentLevelPtr, playerX, playerY, 1, 0, 1);
            addLog("-> 'putExplosion' chamada com sucesso na sua posição!");

        } catch(e) {
            addLog(`[!] Erro ao testar função: ${e.message}`);
        }
    }


    Java.perform(() => {
        // Hook para capturar o ponteiro do "level", necessário para outras funções
        try {
            const levelFuncPtr = Module.findExportByName(targetLib, "_ZN10zF9VgaBKxR10iUxUgaX7aQEdd");
            Interceptor.attach(levelFuncPtr, {
                onEnter: function(args) {
                    currentLevelPtr = args[0]; // Guarda o ponteiro do level para uso futuro
                }
            });
        } catch(e) { console.error("Erro ao hookar level pointer."); }

        try {
            const targetPointer = Module.findExportByName(targetLib, targetFunction);
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    if (!isHookEnabled) return;
                    let logMessage = `[+] Chamada Recebida\n`;
                    for (let i = 0; i < argumentCount; i++) {
                        const originalValue = args[i];
                        const translatedValue = translateArgument(originalValue);
                        logMessage += `  Arg[${i}]: ${originalValue} => ${translatedValue}\n`;
                    }
                    addLog(logMessage);
                }
            });
        } catch (error) { console.error(`[!] Erro ao hookar: ${error.message}`); }

        Java.scheduleOnMainThread(() => {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const PADDING = pixelDensityToPixels(mainActivity, 5);

            // Criação da UI fixa no canto
            const rootLayout = classLoader.LinearLayout.$new(mainActivity);
            rootLayout.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);
            rootLayout.setBackgroundColor(classLoader.Color.parseColor("#A0000000"));
            rootLayout.setPadding(PADDING, PADDING, PADDING, PADDING);

            const controlPanel = classLoader.LinearLayout.$new(mainActivity);
            controlPanel.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            controlPanel.setGravity(classLoader.Gravity.TOP.value);

            // Botão Ligar/Desligar
            const toggleButton = classLoader.TextView.$new(mainActivity);
            toggleButton.setText(classLoader.String.$new("Ligar Hook"));
            toggleButton.setTextColor(classLoader.Color.WHITE.value);
            toggleButton.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
            toggleButton.setPadding(PADDING, PADDING, PADDING, PADDING);
            toggleButton.setOnClickListener(Java.registerClass({
                name: "com.logger.ToggleClick" + Math.random(), implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) {
                    isHookEnabled = !isHookEnabled;
                    v.setText(classLoader.String.$new(isHookEnabled ? "Desligar Hook" : "Ligar Hook"));
                    v.setBackgroundColor(classLoader.Color.parseColor(isHookEnabled ? "#80FF0000" : "#80555555"));
                    addLog(`Hook ${isHookEnabled ? "ATIVADO" : "DESATIVADO"}.`);
                }}
            }).$new());
            controlPanel.addView(toggleButton);

            // Botão Limpar
            const clearButton = classLoader.TextView.$new(mainActivity);
            // ... (estilo do botão)
            clearButton.setText(classLoader.String.$new("Limpar Log"));
            clearButton.setTextColor(classLoader.Color.WHITE.value);
            clearButton.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
            const clearParams = classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            clearParams.setMargins(0, PADDING, 0, 0);
            clearButton.setLayoutParams(clearParams);
            clearButton.setPadding(PADDING, PADDING, PADDING, PADDING);
            clearButton.setOnClickListener(Java.registerClass({
                name: "com.logger.ClearClick" + Math.random(), implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { clearLog(); }}
            }).$new());
            controlPanel.addView(clearButton);

            // NOVO BOTÃO DE TESTE
            const testButton = classLoader.TextView.$new(mainActivity);
            testButton.setText(classLoader.String.$new("Testar Função"));
            testButton.setTextColor(classLoader.Color.WHITE.value);
            testButton.setBackgroundColor(classLoader.Color.parseColor("#801E90FF")); // Azul
            const testParams = classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            testParams.setMargins(0, PADDING, 0, 0);
            testButton.setLayoutParams(testParams);
            testButton.setPadding(PADDING, PADDING, PADDING, PADDING);
            testButton.setOnClickListener(Java.registerClass({
                name: "com.logger.TestClick" + Math.random(), implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { testarFuncaoPutExplosion(); }}
            }).$new());
            controlPanel.addView(testButton);

            logScrollView = classLoader.ScrollView.$new(mainActivity);
            const scrollParams = classLoader.LinearLayout_LayoutParams.$new(pixelDensityToPixels(mainActivity, 300), pixelDensityToPixels(mainActivity, 200));
            scrollParams.setMargins(PADDING, 0, 0, 0);
            logScrollView.setLayoutParams(scrollParams);
            logContainer = classLoader.LinearLayout.$new(mainActivity);
            logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            logScrollView.addView(logContainer);

            rootLayout.addView(controlPanel);
            rootLayout.addView(logScrollView);

            const mainLayoutParams = classLoader.LinearLayout_LayoutParams.$new(-2, -2);
            mainActivity.addContentView(rootLayout, mainLayoutParams);
            rootLayout.setX(0); rootLayout.setY(0);

            addLog("Logger iniciado.");
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }
}, 5000);
