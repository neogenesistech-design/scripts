setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT COMPLETO v11 - LAYOUT FIXO (SEM MENU FLUTUANTE)
    // Abandona a ideia de menu flutuante para usar um painel fixo e semi-transparente.
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function getMainActivity() {
        const activityThread = Java.use("android.app.ActivityThread").sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    // --- Variáveis Globais ---
    let logContainer = null;
    let logScrollView = null;
    let isHookEnabled = false;

    // --- Funções de Controle da UI ---
    function addLog(text) {
        // Garante que a UI seja modificada na thread correta
        Java.scheduleOnMainThread(() => {
            if (!logContainer) return;
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const logEntry = classLoader.TextView.$new(mainActivity);
            logEntry.setText(classLoader.String.$new(text));
            logEntry.setTextColor(classLoader.Color.parseColor("#00FF00")); // Verde
            logEntry.setTextSize(12);
            logContainer.addView(logEntry);
            // Auto-scroll
            logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random(),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { logScrollView.fullScroll(130); } }
            }).$new());
        });
    }

    function clearLog() {
        Java.scheduleOnMainThread(() => {
            if (logContainer) logContainer.removeAllViews();
        });
    }

    // --- ÁREA DE ESTUDO ---
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6;
    // ----------------------

    function inspectPointer(basePtr) {
        if (!basePtr || basePtr.isNull()) return "Ponteiro nulo.\n";
        let result = `\n--- Inspecionando Ptr: ${basePtr} ---\n`;
        try {
            for (let i = 0; i < 512; i += 4) {
                try {
                    const innerPtr = basePtr.add(i).readPointer();
                    if (!innerPtr.isNull()) {
                        const str = innerPtr.readCString(50);
                        if (str && str.length > 2 && /^[a-zA-Z0-9\s_]+$/.test(str)) {
                            result += `  [+] Off +0x${i.toString(16)} -> Str: "${str}"\n`;
                        }
                    }
                } catch (e) { /* Ignora */ }
            }
        } catch (e) { result += `  [!] Falha ao ler memória\n`; }
        return result + "--- Fim ---\n";
    }

    Java.perform(() => {
        try {
            const targetPointer = Module.findExportByName(targetLib, targetFunction);
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    if (!isHookEnabled) return;
                    let logMessage = `[+] Chamada: ${targetFunction.slice(0, 20)}...\n`;
                    const attackerPtr = args[4];
                    logMessage += `  -> Player Ptr: ${args[0]}\n`;
                    logMessage += `  -> Attacker Ptr: ${attackerPtr}\n`;
                    
                    addLog(logMessage);
                    if (attackerPtr && !attackerPtr.isNull()) {
                        addLog(inspectPointer(attackerPtr));
                    }
                }
            });
        } catch (error) { console.error(`[!] Erro ao hookar: ${error.message}`); }

        Java.scheduleOnMainThread(() => {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity(classLoader);
            const PADDING = pixelDensityToPixels(mainActivity, 5);

            // 1. O container principal, com orientação horizontal
            const rootLayout = classLoader.LinearLayout.$new(mainActivity);
            rootLayout.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);
            rootLayout.setBackgroundColor(classLoader.Color.parseColor("#A0000000")); // Fundo semi-transparente
            rootLayout.setPadding(PADDING, PADDING, PADDING, PADDING);

            // 2. O painel de controles à esquerda
            const controlPanel = classLoader.LinearLayout.$new(mainActivity);
            controlPanel.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            controlPanel.setGravity(classLoader.Gravity.TOP.value);

            // Botão Ligar/Desligar
            const toggleButton = classLoader.TextView.$new(mainActivity);
            toggleButton.setText(classLoader.String.$new("Ligar Hook"));
            toggleButton.setTextColor(classLoader.Color.WHITE.value);
            toggleButton.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
            toggleButton.setPadding(PADDING, PADDING, PADDING, PADDING);
            
            toggleButton.setOnClickListener(Java.registerClass({
                name: "com.logger.ToggleClick", implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) {
                    isHookEnabled = !isHookEnabled;
                    if (isHookEnabled) {
                        v.setText(classLoader.String.$new("Desligar Hook"));
                        v.setBackgroundColor(classLoader.Color.parseColor("#80FF0000")); // Vermelho
                        addLog("Hook ATIVADO.");
                    } else {
                        v.setText(classLoader.String.$new("Ligar Hook"));
                        v.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
                        addLog("Hook DESATIVADO.");
                    }
                }}
            }).$new());
            controlPanel.addView(toggleButton);

            // Botão Limpar
            const clearButton = classLoader.TextView.$new(mainActivity);
            clearButton.setText(classLoader.String.$new("Limpar Log"));
            clearButton.setTextColor(classLoader.Color.WHITE.value);
            clearButton.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
            const clearParams = classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            clearParams.setMargins(0, PADDING, 0, 0);
            clearButton.setLayoutParams(clearParams);
            clearButton.setPadding(PADDING, PADDING, PADDING, PADDING);
            clearButton.setOnClickListener(Java.registerClass({
                name: "com.logger.ClearClick", implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { clearLog(); }}
            }).$new());
            controlPanel.addView(clearButton);

            // 3. A área de log rolável à direita
            logScrollView = classLoader.ScrollView.$new(mainActivity);
            // Define que a área de log ocupará o espaço restante
            const scrollParams = classLoader.LinearLayout_LayoutParams.$new(pixelDensityToPixels(mainActivity, 250), pixelDensityToPixels(mainActivity, 200));
            scrollParams.setMargins(PADDING, 0, 0, 0);
            logScrollView.setLayoutParams(scrollParams);
            
            logContainer = classLoader.LinearLayout.$new(mainActivity);
            logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            logScrollView.addView(logContainer);

            // 4. Adiciona os painéis de controle e de log ao layout principal
            rootLayout.addView(controlPanel);
            rootLayout.addView(logScrollView);

            // 5. Adiciona o layout principal à tela no canto superior esquerdo
            const mainLayoutParams = classLoader.LinearLayout_LayoutParams.$new(-2, -2); // WRAP_CONTENT
            mainActivity.addContentView(rootLayout, mainLayoutParams);
            rootLayout.setX(0); rootLayout.setY(0);

            addLog("Logger iniciado.");
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }
}, 5000);
