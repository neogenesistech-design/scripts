setTimeout(() => {
// ===================================================================================
// SCRIPT-MODELO v2 PARA ESTUDO DE FUNÇÕES COM FRIDA
// Formato: Usa a base de UI funcional do menu anterior (barra inferior) com
// uma área de log separada na parte superior da tela.
// ===================================================================================

var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

// --- Funções Utilitárias de UI e Jogo ---

function getClassLoader() {
    return {
        Gravity: Java.use("android.view.Gravity"),
        TextView: Java.use("android.widget.TextView"),
        LinearLayout: Java.use("android.widget.LinearLayout"),
        LinearLayout_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
        Color: Java.use("android.graphics.Color"),
        ActivityThread: Java.use("android.app.ActivityThread"),
        String: Java.use("java.lang.String"),
        ScrollView: Java.use("android.widget.ScrollView"),
        View_OnClickListener: Java.use("android.view.View$OnClickListener"),
    };
}

function getMainActivity(classLoader) {
    const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
    const mActivities = activityThread.mActivities.value;
    return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
}

function pixelDensityToPixels(context, dp) {
    const density = context.getResources().getDisplayMetrics().density.value;
    return parseInt(dp * density);
}

// --- Variáveis Globais ---

let isHookEnabled = false; // Controla se o hook está ativo
let logContainer = null; // Onde as mensagens de log serão adicionadas
let logScrollView = null; // O container rolável para o log

// --- LÓGICA PRINCIPAL ---

Java.perform(() => {

    // --- ÁREA DE ESTUDO ---
    // Altere as variáveis abaixo para hookar a função desejada.
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6; // <-- MUDE AQUI o número de argumentos da função
    // ======================

    try {
        const targetPointer = Module.findExportByName(targetLib, targetFunction);
        Interceptor.attach(targetPointer, {
            onEnter: function(args) {
                if (!isHookEnabled) return;
                
                let logMessage = `[+] Chamada para ${targetFunction}\n`;
                for (let i = 0; i < argumentCount; i++) {
                    logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                }
                addLogToScreen(logMessage); // Envia a mensagem para a UI
            }
        });
    } catch (error) {
        console.error(`[!] Erro ao hookar a função: ${targetFunction}. Verifique o nome e a biblioteca.`);
    }


    // --- CONSTRUÇÃO DA INTERFACE (EXECUTADA NA THREAD PRINCIPAL) ---
    Java.scheduleOnMainThread(() => {
        const classLoader = getClassLoader();
        const mainActivity = getMainActivity(classLoader);
        const Gravity = classLoader.Gravity;
        const Color = classLoader.Color;

        // --- Funções de Manipulação da UI ---
        const addLogToScreen = (text) => {
             // Garante que a manipulação da UI ocorra na thread correta
            Java.scheduleOnMainThread(() => {
                const logEntry = classLoader.TextView.$new(mainActivity);
                logEntry.setText(classLoader.String.$new(text));
                logEntry.setTextColor(Color.parseColor("#00FF00")); // Verde limão
                logEntry.setShadowLayer(5, 0, 0, Color.BLACK.value);
                logContainer.addView(logEntry);

                // Rola para o final para mostrar a última mensagem
                logScrollView.post(Java.registerClass({
                    name: "com.example.ScrollRunnable" + Math.random().toString(36).substring(2),
                    implements: [Java.use("java.lang.Runnable")],
                    methods: { run: () => { logScrollView.fullScroll(130); } } // 130 = View.FOCUS_DOWN
                }).$new());
            });
        };

        const clearLogScreen = () => {
            Java.scheduleOnMainThread(() => {
                logContainer.removeAllViews();
            });
        };
        
        // 1. Construir a Área de Log (Topo da Tela)
        logContainer = classLoader.LinearLayout.$new(mainActivity);
        logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);

        logScrollView = classLoader.ScrollView.$new(mainActivity);
        const scrollParams = classLoader.LinearLayout_LayoutParams.$new(
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value,
            pixelDensityToPixels(mainActivity, 200) // Altura da área de log em DP
        );
        logScrollView.setLayoutParams(scrollParams);
        logScrollView.setBackgroundColor(Color.parseColor("#A0000000")); // Fundo escuro semi-transparente
        logScrollView.addView(logContainer);

        const topLayout = classLoader.LinearLayout.$new(mainActivity);
        topLayout.setGravity(Gravity.TOP.value | Gravity.CENTER_HORIZONTAL.value);
        topLayout.addView(logScrollView);
        mainActivity.addContentView(topLayout, topLayout.getLayoutParams());

        // 2. Construir a Barra de Controle (Inferior da Tela)
        const PADDING = pixelDensityToPixels(mainActivity, 8);
        const MARGIN = pixelDensityToPixels(mainActivity, 2);
        
        const mainBarLayout = classLoader.LinearLayout.$new(mainActivity);
        mainBarLayout.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);
        mainBarLayout.setGravity(Gravity.CENTER.value);

        const bottomLayout = classLoader.LinearLayout.$new(mainActivity);
        const bottomParams = classLoader.LinearLayout_LayoutParams.$new(
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value,
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value
        );
        bottomLayout.setLayoutParams(bottomParams);
        bottomLayout.setGravity(Gravity.CENTER_HORIZONTAL.value | Gravity.BOTTOM.value);
        bottomLayout.addView(mainBarLayout);

        // Botão para Ligar/Desligar o Hook
        const hookToggle = classLoader.TextView.$new(mainActivity);
        hookToggle.setText(classLoader.String.$new("Ligar Hook"));
        hookToggle.setTextColor(Color.WHITE.value);
        hookToggle.setBackgroundColor(Color.parseColor("#80555555"));
        hookToggle.setPadding(PADDING, PADDING, PADDING, PADDING);
        const toggleParams = hookToggle.getLayoutParams();
        toggleParams.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
        hookToggle.setLayoutParams(toggleParams);
        
        hookToggle.setOnClickListener(Java.registerClass({
            name: "com.example.HookToggleClick" + Math.random().toString(36).substring(2),
            implements: [classLoader.View_OnClickListener],
            methods: {
                onClick(v) {
                    isHookEnabled = !isHookEnabled;
                    if (isHookEnabled) {
                        v.setText(classLoader.String.$new("Desligar Hook"));
                        v.setBackgroundColor(Color.parseColor("#80FF0000")); // Vermelho semi-transparente
                        addLogToScreen("Hook ativado.");
                    } else {
                        v.setText(classLoader.String.$new("Ligar Hook"));
                        v.setBackgroundColor(Color.parseColor("#80555555"));
                        addLogToScreen("Hook desativado.");
                    }
                }
            }
        }).$new());
        mainBarLayout.addView(hookToggle);

        // Botão para Limpar o Log
        const clearButton = classLoader.TextView.$new(mainActivity);
        clearButton.setText(classLoader.String.$new("Limpar Log"));
        clearButton.setTextColor(Color.WHITE.value);
        clearButton.setBackgroundColor(Color.parseColor("#80555555"));
        clearButton.setPadding(PADDING, PADDING, PADDING, PADDING);
        const clearParams = clearButton.getLayoutParams();
        clearParams.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
        clearButton.setLayoutParams(clearParams);

        clearButton.setOnClickListener(Java.registerClass({
            name: "com.example.ClearClick" + Math.random().toString(36).substring(2),
            implements: [classLoader.View_OnClickListener],
            methods: { onClick(v) { clearLogScreen(); } }
        }).$new());
        mainBarLayout.addView(clearButton);

        mainActivity.addContentView(bottomLayout, bottomParams);
        
        addLogToScreen("Logger iniciado. Ligue o hook para começar.");
    });
});

// --- Funções Utilitárias ---
function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }

}, 5000);
