setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT-MODELO v4 - CORREÇÃO DA LÓGICA DE ABERTURA DO MENU
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            ViewGroup_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            View: Java.use("android.view.View"),
            View_OnTouchListener: Java.use("android.view.View$OnTouchListener"),
            MotionEvent: Java.use("android.view.MotionEvent"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    function getMainActivity(classLoader) {
        const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        const activityClientRecord = Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord"));
        return activityClientRecord.activity.value;
    }

    class Menu {
        #classLoader; #activity; #menuStart; #menuLayout; #menuScrollLayout; #menuScrollView;
        #colorOn; #colorOff;

        constructor(classLoader, activity) {
            this.#classLoader = classLoader;
            this.#activity = activity;
        }

        // --- MÉTODOS DE CRIAÇÃO DOS ELEMENTOS ---
        createMenuStart(title, size, color) {
            const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(-2, -2); // WRAP_CONTENT
            this.#menuStart = this.#classLoader.TextView.$new(this.#activity);
            this.#menuStart.setLayoutParams(layoutParams);
            this.#menuStart.setText(this.#classLoader.String.$new(title));
            this.#menuStart.setTextSize(pixelDensityToPixels(this.#activity, size));
            this.#menuStart.setTextColor(this.#classLoader.Color.parseColor(color));
            this.#menuStart.setBackgroundColor(this.#classLoader.Color.WHITE.value);
            this.#menuStart.setPadding(10, 10, 10, 10);
        }

        createMenuLayout(bgColor, width, height) {
            const widthDp = pixelDensityToPixels(this.#activity, width);
            const heightDp = pixelDensityToPixels(this.#activity, height);
            const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(widthDp, heightDp);
            this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#menuLayout.setLayoutParams(layoutParams);
            this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(bgColor));
            this.#menuLayout.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
        }

        createMenuBar(title) {
            const menuBarLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor("#635985"));

            const menuBarTitle = this.#classLoader.TextView.$new(this.#activity);
            menuBarTitle.setText(this.#classLoader.String.$new(title));
            menuBarTitle.setTextColor(this.#classLoader.Color.parseColor("#FFC107"));
            menuBarTitle.setGravity(this.#classLoader.Gravity.CENTER.value);
            menuBarTitle.setPadding(10, 10, 10, 10);
            
            menuBarLayout.addView(menuBarTitle);
            this.#menuLayout.addView(menuBarLayout);
            return menuBarLayout; // Retorna a barra para adicionar eventos nela
        }

        createOptionsContainer(colorOn, colorOff) {
            this.#colorOn = colorOn; this.#colorOff = colorOff;
            this.#menuScrollView = this.#classLoader.ScrollView.$new(this.#activity);
            this.#menuScrollLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#menuScrollLayout.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#menuScrollLayout.setPadding(8,8,8,8);
            this.#menuScrollView.addView(this.#menuScrollLayout);
            this.#menuLayout.addView(this.#menuScrollView);
        }

        // --- MÉTODOS DE FUNCIONALIDADE ---
        addLog(text) {
            const textView = this.#classLoader.TextView.$new(this.#activity);
            textView.setText(this.#classLoader.String.$new(text));
            textView.setTextColor(this.#classLoader.Color.parseColor("#00FF00"));
            this.#menuScrollLayout.addView(textView);
            this.#menuScrollView.post(Java.registerClass({
                name: "com.example.ScrollRunnable" + Math.random().toString(36).substring(2),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { this.#menuScrollView.fullScroll(130); } }
            }).$new());
        }

        clearLog() { this.#menuScrollLayout.removeAllViews(); }
        
        addButton(text, callback) {
            const button = this.#classLoader.TextView.$new(this.#activity);
            // Estilo e configuração do botão...
            button.setText(this.#classLoader.String.$new(text));
            button.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            button.setTextColor(this.#classLoader.Color.parseColor("#FFFFFF"));
            button.setGravity(this.#classLoader.Gravity.CENTER.value);
            const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2); // MATCH_PARENT, WRAP_CONTENT
            layoutParams.setMargins(0, 5, 0, 5);
            button.setLayoutParams(layoutParams);
            button.setPadding(10, 10, 10, 10);

            button.setOnClickListener(Java.registerClass({
                name: "com.example.ButtonListener" + Math.random().toString(36).substring(2),
                implements: [this.#classLoader.View_OnClickListener],
                methods: { onClick(v) { callback(); } }
            }).$new());
            this.#menuScrollLayout.addView(button);
        }

        addOption(id, text, callbacks) {
            const option = this.#classLoader.TextView.$new(this.#activity);
            // Estilo e configuração da opção...
            option.setText(this.#classLoader.String.$new(text));
            option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            option.setTextColor(this.#classLoader.Color.parseColor("#FFFFFF"));
            option.setGravity(this.#classLoader.Gravity.CENTER.value);
            const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2); // MATCH_PARENT, WRAP_CONTENT
            layoutParams.setMargins(0, 5, 0, 5);
            option.setLayoutParams(layoutParams);
            option.setPadding(10, 10, 10, 10);

            let optionState = false;
            option.setOnClickListener(Java.registerClass({
                name: "com.example." + id,
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick(v) {
                        optionState = !optionState;
                        if (optionState) {
                            v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOn)); callbacks.on();
                        } else {
                            v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff)); callbacks.off();
                        }
                    }
                }
            }).$new());
            this.#menuScrollLayout.addView(option);
        }

        // --- LÓGICA DE VISIBILIDADE E DRAG ---
        #makeDraggable(view) {
            let initialX = 0, initialY = 0, initialTouchX = 0, initialTouchY = 0;
            view.setOnTouchListener(Java.registerClass({
                name: "com.example.DragListener" + Math.random().toString(36).substring(2),
                implements: [this.#classLoader.View_OnTouchListener],
                methods: {
                    onTouch(v, event) {
                        switch (event.getAction()) {
                            case this.#classLoader.MotionEvent.ACTION_DOWN.value:
                                initialX = v.getX(); initialY = v.getY();
                                initialTouchX = event.getRawX(); initialTouchY = event.getRawY();
                                return true;
                            case this.#classLoader.MotionEvent.ACTION_MOVE.value:
                                v.setX(initialX + (event.getRawX() - initialTouchX));
                                v.setY(initialY + (event.getRawY() - initialTouchY));
                                return true;
                        }
                        return false;
                    }
                }
            }).$new());
        }

        start() {
            const rootLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            rootLayout.setGravity(this.#classLoader.Gravity.CENTER.value);

            // Adiciona ambos os menus ao layout raiz
            rootLayout.addView(this.#menuLayout);
            rootLayout.addView(this.#menuStart);

            // Define a visibilidade inicial
            this.#menuLayout.setVisibility(this.#classLoader.View.GONE.value);
            this.#menuStart.setVisibility(this.#classLoader.View.VISIBLE.value);

            // Lógica para abrir/fechar
            this.#menuStart.setOnClickListener(Java.registerClass({
                name: "com.example.OpenMenu", implements: [this.#classLoader.View_OnClickListener],
                methods: { onClick: (v) => {
                    this.#menuStart.setVisibility(this.#classLoader.View.GONE.value);
                    this.#menuLayout.setVisibility(this.#classLoader.View.VISIBLE.value);
                }}
            }).$new());
            
            // O menuBar agora é o handle para arrastar e para fechar
            const menuBar = this.#menuLayout.getChildAt(0);
            this.#makeDraggable(this.#menuLayout); // Arrastar o layout inteiro
            
            menuBar.setOnClickListener(Java.registerClass({
                name: "com.example.CloseMenu", implements: [this.#classLoader.View_OnClickListener],
                methods: { onClick: (v) => {
                    this.#menuStart.setVisibility(this.#classLoader.View.VISIBLE.value);
                    this.#menuLayout.setVisibility(this.#classLoader.View.GONE.value);
                }}
            }).$new());

            this.#activity.addContentView(rootLayout, rootLayout.getLayoutParams());
        }
    }

    let menu = null;
    let isHookEnabled = false;

    // --- ÁREA DE ESTUDO ---
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6;
    // ----------------------

    Java.perform(function () {
        try {
            const targetPointer = Module.findExportByName(targetLib, targetFunction);
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    if (!isHookEnabled || !menu) return;
                    let logMessage = `[+] Chamada para ${targetFunction}\n`;
                    for (let i = 0; i < argumentCount; i++) {
                        logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                    }
                    Java.scheduleOnMainThread(() => { menu.addLog(logMessage); });
                }
            });
        } catch (error) { console.error(`[!] Erro ao hookar a função: ${targetFunction}`); }

        Java.scheduleOnMainThread(function () {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity(classLoader);
            menu = new Menu(classLoader, mainActivity);

            // 1. Cria o botão minimizado
            menu.createMenuStart("LOGGER", 15, "#FF5722");
            // 2. Cria a janela expandida
            menu.createMenuLayout("#18122B", 280, 400); // (cor, largura, altura)
            // 3. Adiciona a barra de título (que também servirá para fechar)
            menu.createMenuBar("Logger de Funções (Clique para fechar)");
            // 4. Cria a área rolável para as opções/log
            menu.createOptionsContainer("#443C68", "#393053");

            // 5. Adiciona os controles ao menu
            const call_toggleHook = {
                on() { isHookEnabled = true; menu.addLog("Hook LIGADO."); },
                off() { isHookEnabled = false; menu.addLog("Hook DESLIGADO."); }
            };
            menu.addOption("toggleHook", "Ligar/Desligar Hook", call_toggleHook);
            menu.addButton("Limpar Log", () => { menu.clearLog(); });
            
            // 6. Inicia e mostra o menu na tela
            menu.start();
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }

}, 5000);
