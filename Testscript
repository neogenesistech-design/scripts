setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT COMPLETO v27 - CORREÇÃO DO BUG "FUNÇÃO NÃO ENCONTRADA"
    // Adiciona uma limpeza automática (trim) ao texto colado no campo de input
    // para remover caracteres invisíveis que causam o erro.
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            EditText: Java.use("android.widget.EditText"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            FrameLayout_LayoutParams: Java.use("android.widget.FrameLayout$LayoutParams"),
            FrameLayout: Java.use("android.widget.FrameLayout"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function getMainActivity() {
        const activityThread = Java.use("android.app.ActivityThread").sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    let logContainer = null;
    let logScrollView = null;
    let currentHookListener = null;
    const targetLib = "libqplay.so";

    function addLog(text) {
        Java.scheduleOnMainThread(() => {
            if (!logContainer) return;
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const logEntry = classLoader.TextView.$new(mainActivity);
            logEntry.setText(classLoader.String.$new(text));
            logEntry.setTextColor(classLoader.Color.parseColor("#00FF00"));
            logEntry.setTextSize(12);
            logContainer.addView(logEntry);
            logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random().toString(36).substring(2),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { logScrollView.fullScroll(130); } }
            }).$new());
        });
    }

    function clearLog() {
        Java.scheduleOnMainThread(() => {
            if (logContainer) logContainer.removeAllViews();
        });
    }

    function applyHook(functionNameOrAddress) {
        if (currentHookListener) {
            currentHookListener.detach();
            currentHookListener = null;
            addLog("[+] Hook anterior desativado.");
        }
        
        // *** A CORREÇÃO ESTÁ AQUI! ***
        // Limpa espaços em branco e caracteres invisíveis do início e do fim do texto.
        const cleanInput = functionNameOrAddress.trim();

        if (!cleanInput || cleanInput.length === 0) {
            addLog("[!] Nome da função não pode ser vazio.");
            return;
        }

        try {
            let targetPointer;
            if (cleanInput.startsWith('0x')) {
                targetPointer = ptr(cleanInput);
                addLog(`[+] Tentando hookar endereço: ${targetPointer}`);
            } else {
                targetPointer = Module.findExportByName(targetLib, cleanInput);
                addLog(`[+] Tentando hookar função: ${cleanInput}`);
            }

            if (!targetPointer || targetPointer.isNull()) {
                throw new Error("Função ou endereço não encontrado.");
            }

            currentHookListener = Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    let logMessage = `[+] Chamada para ${cleanInput.slice(0, 30)}...\n`;
                    for (let i = 0; i < 10; i++) {
                        try {
                            if (args[i] === undefined) break;
                            logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                        } catch(e) { break; }
                    }
                    addLog(logMessage);
                }
            });
            addLog(`[+] SUCESSO! Hook ativado para ${cleanInput}.`);
        } catch (error) {
            addLog(`[!] ERRO ao aplicar hook: ${error.message}`);
            console.error(`[!] Erro ao aplicar hook: ${error.message}`);
        }
    }

    function deactivateHook() {
        if (currentHookListener) {
            currentHookListener.detach();
            currentHookListener = null;
            addLog("[+] Hook desativado.");
        } else {
            addLog("[i] Nenhum hook estava ativo.");
        }
    }
    
    function listAllFunctions() {
        clearLog();
        addLog(`--- Funções em ${targetLib} ---`);
        const exports = Module.enumerateExports(targetLib);
        if (exports.length === 0) {
            addLog("[!] Nenhuma função exportada encontrada.");
            return;
        }
        exports.forEach(exp => {
            if(exp.type === 'function') addLog(`${exp.name}`);
        });
        addLog(`--- Fim da lista (${exports.length} exports) ---`);
    }

    Java.perform(() => {
        Java.scheduleOnMainThread(() => {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const PADDING = pixelDensityToPixels(mainActivity, 5);

            const mainPanel = classLoader.LinearLayout.$new(mainActivity);
            mainPanel.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            mainPanel.setBackgroundColor(classLoader.Color.parseColor("#C0000000"));
            mainPanel.setPadding(PADDING, PADDING, PADDING, PADDING);

            const functionInput = classLoader.EditText.$new(mainActivity);
            functionInput.setHint(classLoader.String.$new("Nome ou 0xEndereço da função..."));
            functionInput.setTextColor(classLoader.Color.WHITE.value);
            functionInput.setHintTextColor(classLoader.Color.GRAY.value);
            functionInput.setBackgroundColor(classLoader.Color.parseColor("#80000000"));
            mainPanel.addView(functionInput);

            function createButton(text, onClickListener, weight = 1.0) {
                const button = classLoader.TextView.$new(mainActivity);
                button.setText(classLoader.String.$new(text));
                button.setTextColor(classLoader.Color.WHITE.value);
                button.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
                button.setGravity(classLoader.Gravity.CENTER.value);
                button.setPadding(PADDING, PADDING, PADDING, PADDING);
                const params = classLoader.LinearLayout_LayoutParams.$new(0, -2, weight);
                params.setMargins(PADDING, PADDING, PADDING, PADDING);
                button.setLayoutParams(params);
                button.setOnClickListener(onClickListener);
                return button;
            }

            const buttonPanel1 = classLoader.LinearLayout.$new(mainActivity);
            buttonPanel1.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);

            const applyButton = createButton("Aplicar Hook", Java.registerClass({
                name: "com.logger.ApplyClick" + Math.random(),
                implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { 
                    const functionName = functionInput.getText().toString();
                    applyHook(functionName);
                }}
            }).$new());

            const deactivateButton = createButton("Desativar", Java.registerClass({
                name: "com.logger.DeactivateClick" + Math.random(),
                implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { deactivateHook(); }}
            }).$new());
            
            buttonPanel1.addView(applyButton);
            buttonPanel1.addView(deactivateButton);
            mainPanel.addView(buttonPanel1);
            
            const buttonPanel2 = classLoader.LinearLayout.$new(mainActivity);
            buttonPanel2.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);

            const listButton = createButton("Listar Funções", Java.registerClass({
                name: "com.logger.ListClick" + Math.random(),
                implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { listAllFunctions(); }}
            }).$new());
            
            const clearButton = createButton("Limpar Log", Java.registerClass({
                name: "com.logger.ClearClick" + Math.random(),
                implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { clearLog(); }}
            }).$new());
            
            buttonPanel2.addView(listButton);
            buttonPanel2.addView(clearButton);
            mainPanel.addView(buttonPanel2);

            logScrollView = classLoader.ScrollView.$new(mainActivity);
            const scrollParams = classLoader.LinearLayout_LayoutParams.$new(-1, 0, 1.0);
            scrollParams.setMargins(0, PADDING, 0, 0);
            logScrollView.setLayoutParams(scrollParams);
            
            logContainer = classLoader.LinearLayout.$new(mainActivity);
            logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            logScrollView.addView(logContainer);
            mainPanel.addView(logScrollView);
            
            const positionerLayout = classLoader.FrameLayout.$new(mainActivity);
            const panelParams = classLoader.FrameLayout_LayoutParams.$new(
                pixelDensityToPixels(mainActivity, 350), -2 // WRAP_CONTENT para altura
            );
            panelParams.gravity = classLoader.Gravity.START.value | classLoader.Gravity.TOP.value;
            mainPanel.setLayoutParams(panelParams);

            positionerLayout.addView(mainPanel);
            mainActivity.addContentView(positionerLayout, positionerLayout.getLayoutParams());
            
            addLog("Logger Dinâmico Iniciado.");
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }
}, 5000);
