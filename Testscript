setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT COMPLETO v23 - SUA FERRAMENTA DE LOGGER NO LAYOUT FIXO À ESQUERDA
    // Usa a lógica de logger do seu script v6, mas em um painel fixo que funciona.
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            FrameLayout_LayoutParams: Java.use("android.widget.FrameLayout$LayoutParams"),
            FrameLayout: Java.use("android.widget.FrameLayout"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function getMainActivity() {
        const activityThread = Java.use("android.app.ActivityThread").sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    // --- Variáveis Globais ---
    let logContainer = null;
    let logScrollView = null;
    let isHookEnabled = false;

    // --- Funções de Controle da UI ---
    function addLog(text) {
        Java.scheduleOnMainThread(() => {
            if (!logContainer) return;
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const logEntry = classLoader.TextView.$new(mainActivity);
            logEntry.setText(classLoader.String.$new(text));
            logEntry.setTextColor(classLoader.Color.parseColor("#00FF00"));
            logEntry.setTextSize(12);
            logContainer.addView(logEntry);
            logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random().toString(36).substring(2),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { logScrollView.fullScroll(130); } }
            }).$new());
        });
    }

    function clearLog() {
        Java.scheduleOnMainThread(() => {
            if (logContainer) logContainer.removeAllViews();
        });
    }

    // --- ÁREA DE ESTUDO (DO SEU SCRIPT) ---
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6;
    // ------------------------------------

    Java.perform(function () {
        // --- LÓGICA DE HOOK (DO SEU SCRIPT) ---
        try {
            const targetPointer = Module.findExportByName(targetLib, targetFunction);
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    if (!isHookEnabled) return;
                    let logMessage = `[+] Chamada: ${targetFunction.slice(0, 20)}...\n`;
                    for (let i = 0; i < argumentCount; i++) {
                        logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                    }
                    addLog(logMessage);
                }
            });
        } catch (error) { console.error(`[!] Erro ao hookar função: ${error.message}`); }

        // --- CONSTRUÇÃO DA INTERFACE GRÁFICA (LAYOUT FIXO À ESQUERDA) ---
        Java.scheduleOnMainThread(function () {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const PADDING = pixelDensityToPixels(mainActivity, 8);
            const COLOR_ON = "#80FF0000";  // Vermelho para "ligado"
            const COLOR_OFF = "#80555555"; // Cinza para "desligado"

            // Função helper para criar botões
            function createButton(text, onClickListener) {
                const button = classLoader.TextView.$new(mainActivity);
                button.setText(classLoader.String.$new(text));
                button.setTextColor(classLoader.Color.WHITE.value);
                button.setBackgroundColor(classLoader.Color.parseColor(COLOR_OFF));
                button.setGravity(classLoader.Gravity.CENTER.value);
                button.setPadding(PADDING, PADDING, PADDING, PADDING);
                const params = classLoader.LinearLayout_LayoutParams.$new(-1, -2); // MATCH_PARENT, WRAP_CONTENT
                params.setMargins(0, 0, 0, PADDING);
                button.setLayoutParams(params);
                button.setOnClickListener(onClickListener);
                return button;
            }

            // 1. O painel principal (vertical)
            const mainPanel = classLoader.LinearLayout.$new(mainActivity);
            mainPanel.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            mainPanel.setBackgroundColor(classLoader.Color.parseColor("#A0000000"));
            mainPanel.setPadding(PADDING, PADDING, PADDING, PADDING);

            // 2. Botões de Controle
            
            // Botão Ligar/Desligar Hook
            const toggleButtonListener = Java.registerClass({
                name: "com.logger.ToggleClick" + Math.random().toString(36).substring(2),
                implements: [classLoader.View_OnClickListener],
                methods: {
                    onClick(v) {
                        isHookEnabled = !isHookEnabled;
                        if (isHookEnabled) {
                            v.setText(classLoader.String.$new("Desligar Hook"));
                            v.setBackgroundColor(classLoader.Color.parseColor(COLOR_ON));
                            addLog("Hook ATIVADO.");
                        } else {
                            v.setText(classLoader.String.$new("Ligar Hook"));
                            v.setBackgroundColor(classLoader.Color.parseColor(COLOR_OFF));
                            addLog("Hook DESATIVADO.");
                        }
                    }
                }
            }).$new();
            const toggleButton = createButton("Ligar Hook", toggleButtonListener);
            mainPanel.addView(toggleButton);

            // Botão Limpar Log
            const clearButtonListener = Java.registerClass({
                name: "com.logger.ClearClick" + Math.random().toString(36).substring(2),
                implements: [classLoader.View_OnClickListener],
                methods: { onClick(v) { clearLog(); } }
            }).$new();
            const clearButton = createButton("Limpar Log", clearButtonListener);
            mainPanel.addView(clearButton);

            // 3. Área de Log rolável
            logScrollView = classLoader.ScrollView.$new(mainActivity);
            const scrollParams = classLoader.LinearLayout_LayoutParams.$new(-1, 0, 1.0); // Ocupa o resto do espaço
            logScrollView.setLayoutParams(scrollParams);
            
            logContainer = classLoader.LinearLayout.$new(mainActivity);
            logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);
            logScrollView.addView(logContainer);
            mainPanel.addView(logScrollView);

            // 4. Container de posicionamento para colocar o painel à esquerda
            const positionerLayout = classLoader.FrameLayout.$new(mainActivity);
            const panelParams = classLoader.FrameLayout_LayoutParams.$new(
                pixelDensityToPixels(mainActivity, 250), // Largura do painel
                pixelDensityToPixels(mainActivity, 300)  // Altura do painel
            );
            panelParams.gravity = classLoader.Gravity.START.value | classLoader.Gravity.CENTER_VERTICAL.value; // START = Esquerda
            mainPanel.setLayoutParams(panelParams);

            // 5. Adiciona tudo à tela
            positionerLayout.addView(mainPanel);
            mainActivity.addContentView(positionerLayout, positionerLayout.getLayoutParams());

            addLog("Logger Fixo Iniciado.");
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }
}, 5000);
