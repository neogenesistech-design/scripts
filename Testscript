setTimeout(() => {
    var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

    // ===================================================================================
    // SCRIPT COMPLETO v28 - LOGGER ESTÁTICO E CONFIÁVEL
    // Retornamos ao formato mais simples e estável (painel fixo).
    // A função a ser hookada é definida nas variáveis abaixo.
    // ===================================================================================

    // --- ÁREA DE CONFIGURAÇÃO ---
    // Altere as variáveis aqui para definir o que você quer hookar.
    const TARGET_LIB = "libqplay.so";
    const TARGET_FUNCTION = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const ARGUMENT_COUNT = 6; // Quantos argumentos da função você quer exibir no log.
    // --------------------------

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        };
    }

    function getMainActivity() {
        const activityThread = Java.use("android.app.ActivityThread").sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        return Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord")).activity.value;
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    // --- Variáveis Globais ---
    let logContainer = null;
    let logScrollView = null;
    let isHookEnabled = false;

    // --- Funções de Controle da UI ---
    function addLog(text) {
        Java.scheduleOnMainThread(() => {
            if (!logContainer) return;
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity();
            const logEntry = classLoader.TextView.$new(mainActivity);
            logEntry.setText(classLoader.String.$new(text));
            logEntry.setTextColor(classLoader.Color.parseColor("#00FF00"));
            logEntry.setTextSize(12);
            logContainer.addView(logEntry);
            logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random().toString(36).substring(2),
                implements: [Java.use("java.lang.Runnable")],
                methods: { run: () => { logScrollView.fullScroll(130); } }
            }).$new());
        });
    }

    function clearLog() {
        Java.scheduleOnMainThread(() => {
            if (logContainer) logContainer.removeAllViews();
        });
    }

    // --- LÓGICA PRINCIPAL ---
    Java.perform(() => {
        // O hook é preparado assim que o script é injetado.
        try {
            const targetPointer = Module.findExportByName(TARGET_LIB, TARGET_FUNCTION);
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    // A variável 'isHookEnabled' controla se o log é exibido ou não.
                    if (!isHookEnabled) return;

                    let logMessage = `[+] Chamada para ${TARGET_FUNCTION.slice(0, 30)}...\n`;
                    for (let i = 0; i < ARGUMENT_COUNT; i++) {
                        try {
                            if (args[i] === undefined) break;
                            logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                        } catch(e) { break; }
                    }
                    addLog(logMessage);
                }
            });
        } catch (error) {
            console.error(`[!] Erro ao preparar o hook para ${TARGET_FUNCTION}: ${error.message}`);
            // Adiciona o erro ao log do menu também, para fácil visualização
            Java.scheduleOnMainThread(() => {
                addLog(`[!] Erro ao hookar ${TARGET_FUNCTION}. Verifique o nome e o console do Frida.`);
            });
        }

        // --- CONSTRUÇÃO DA INTERFACE GRÁFICA ---
        Java.scheduleOnMainThread(() => {
            try {
                const classLoader = getClassLoader();
                const mainActivity = getMainActivity();
                const PADDING = pixelDensityToPixels(mainActivity, 8);

                // 1. O painel principal (vertical)
                const mainPanel = classLoader.LinearLayout.$new(mainActivity);
                mainPanel.setOrientation(classLoader.LinearLayout.VERTICAL.value);
                mainPanel.setBackgroundColor(classLoader.Color.parseColor("#C0000000"));
                mainPanel.setPadding(PADDING, PADDING, PADDING, PADDING);

                // Helper para criar botões
                function createButton(text, onClickListener) {
                    const button = classLoader.TextView.$new(mainActivity);
                    button.setText(classLoader.String.$new(text));
                    button.setTextColor(classLoader.Color.WHITE.value);
                    button.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
                    button.setGravity(classLoader.Gravity.CENTER.value);
                    button.setPadding(PADDING, PADDING, PADDING, PADDING);
                    const params = classLoader.LinearLayout_LayoutParams.$new(-1, -2);
                    params.setMargins(0, 0, 0, PADDING);
                    button.setLayoutParams(params);
                    button.setOnClickListener(onClickListener);
                    return button;
                }

                // 2. Botões de Controle
                const toggleButtonListener = Java.registerClass({
                    name: "com.logger.ToggleClick" + Math.random().toString(36).substring(2),
                    implements: [classLoader.View_OnClickListener],
                    methods: {
                        onClick(v) {
                            isHookEnabled = !isHookEnabled;
                            if (isHookEnabled) {
                                v.setText(classLoader.String.$new("Desligar Hook"));
                                v.setBackgroundColor(classLoader.Color.parseColor("#80FF0000"));
                                addLog("Hook ATIVADO.");
                            } else {
                                v.setText(classLoader.String.$new("Ligar Hook"));
                                v.setBackgroundColor(classLoader.Color.parseColor("#80555555"));
                                addLog("Hook DESATIVADO.");
                            }
                        }
                    }
                }).$new();
                const toggleButton = createButton("Ligar Hook", toggleButtonListener);
                mainPanel.addView(toggleButton);

                const clearButtonListener = Java.registerClass({
                    name: "com.logger.ClearClick" + Math.random().toString(36).substring(2),
                    implements: [classLoader.View_OnClickListener],
                    methods: { onClick(v) { clearLog(); } }
                }).$new();
                const clearButton = createButton("Limpar Log", clearButtonListener);
                mainPanel.addView(clearButton);

                // 3. Área de Log rolável
                logScrollView = classLoader.ScrollView.$new(mainActivity);
                const scrollParams = classLoader.LinearLayout_LayoutParams.$new(-1, 0, 1.0);
                logScrollView.setLayoutParams(scrollParams);
                
                logContainer = classLoader.LinearLayout.$new(mainActivity);
                logContainer.setOrientation(classLoader.LinearLayout.VERTICAL.value);
                logScrollView.addView(logContainer);
                mainPanel.addView(logScrollView);
                
                // 4. Adiciona o painel à tela usando o método que funcionou
                const panelParams = classLoader.LinearLayout_LayoutParams.$new(
                    pixelDensityToPixels(mainActivity, 300),
                    pixelDensityToPixels(mainActivity, 400)
                );
                mainPanel.setLayoutParams(panelParams);
                mainActivity.addContentView(mainPanel, panelParams);
                
                // 5. Posiciona no canto superior esquerdo
                mainPanel.setX(0);
                mainPanel.setY(50);

                addLog("Logger Estático Iniciado.");
                addLog(`Pronto para hookar: ${TARGET_FUNCTION.slice(0,30)}...`);

            } catch (e) {
                console.error("[!] Erro CRÍTICO ao criar a UI:", e.stack);
            }
        });
    });

    function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }
}, 5000);
