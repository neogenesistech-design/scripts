setTimeout(() => {
    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    // SCRIPT DE ANÁLISE v18 - Hook no Message Handler com "Tradução" de Argumentos
    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View: Java.use("android.view.View"),
        };
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    function getMainActivity(classLoader) {
        const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        const activityClientRecord = Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord"));
        return activityClientRecord.activity.value;
    }

    class Menu {
        #classLoader; #activity; #menuLayout; #controlContainer; #logContainer; #logScrollView; #colorOn; #colorOff; #isExpanded = true;

        constructor(classLoader, activity, title, width, bgColor) {
            this.#classLoader = classLoader;
            this.#activity = activity;
            this.#createStaticLayout(title, width, bgColor);
        }

        #createStaticLayout(title, width, bgColor) {
            const MATCH = -1;
            const WRAP = -2;
            const widthDp = pixelDensityToPixels(this.#activity, width);

            const rootView = this.#classLoader.LinearLayout.$new(this.#activity);
            rootView.setLayoutParams(this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, MATCH));
            rootView.setGravity(this.#classLoader.Gravity.LEFT.value);
            this.rootView = rootView;

            this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            const menuParams = this.#classLoader.LinearLayout_LayoutParams.$new(widthDp, WRAP);
            this.#menuLayout.setLayoutParams(menuParams);
            this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(bgColor));
            this.#menuLayout.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);

            const menuBarLayout = this.#classLoader.TextView.$new(this.#activity);
            menuBarLayout.setText(this.#classLoader.String.$new(title));
            menuBarLayout.setTextColor(this.#classLoader.Color.parseColor("#FFC107"));
            menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor("#B3635985"));
            menuBarLayout.setGravity(this.#classLoader.Gravity.CENTER.value);
            menuBarLayout.setPadding(10, 10, 10, 10);
            this.#menuLayout.addView(menuBarLayout);

            this.#controlContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#controlContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#controlContainer.setPadding(8, 8, 8, 8);
            this.#menuLayout.addView(this.#controlContainer);

            this.#logScrollView = this.#classLoader.ScrollView.$new(this.#activity);
            this.#logScrollView.setLayoutParams(this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, pixelDensityToPixels(this.#activity, 300)));
            this.#logContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#logContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#logContainer.setPadding(8, 8, 8, 8);
            this.#logScrollView.addView(this.#logContainer);
            this.#menuLayout.addView(this.#logScrollView);

            const self = this;
            const View = this.#classLoader.View;
            menuBarLayout.setOnClickListener(Java.registerClass({
                name: "com.logger.ToggleClickListener" + Math.random().toString().replace(".", ""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick(v) {
                        self.#isExpanded = !self.#isExpanded;
                        const visibility = self.#isExpanded ? View.VISIBLE.value : View.GONE.value;
                        self.#controlContainer.setVisibility(visibility);
                        self.#logScrollView.setVisibility(visibility);
                    }
                }
            }).$new());
            
            this.rootView.addView(this.#menuLayout);
        }

        setOptionColors(colorOn, colorOff) { this.#colorOn = colorOn; this.#colorOff = colorOff; }

        addOption(id, name, callbacks) {
            const option = this.#classLoader.TextView.$new(this.#activity);
            option.setText(this.#classLoader.String.$new(name));
            option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            option.setTextColor(this.#classLoader.Color.WHITE.value);
            option.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            option.setLayoutParams(params);
            option.setPadding(10, 10, 10, 10);
            let state = false;
            option.setOnClickListener(Java.registerClass({
                name: "com.logger.OptionClick" + id,
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick: (v) => {
                        state = !state;
                        v.setBackgroundColor(this.#classLoader.Color.parseColor(state ? this.#colorOn : this.#colorOff));
                        if (state) callbacks.on(); else callbacks.off();
                    }
                }
            }).$new());
            this.#controlContainer.addView(option);
        }

        addButton(text, callback) {
            const button = this.#classLoader.TextView.$new(this.#activity);
            button.setText(this.#classLoader.String.$new(text));
            button.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            button.setTextColor(this.#classLoader.Color.WHITE.value);
            button.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            button.setLayoutParams(params);
            button.setPadding(10, 10, 10, 10);
            button.setOnClickListener(Java.registerClass({
                name: "com.logger.ButtonClick" + text.replace(/ /g, ""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: { onClick: (v) => callback() }
            }).$new());
            this.#controlContainer.addView(button);
        }

        addLog(text) {
            Java.scheduleOnMainThread(() => {
                const logEntry = this.#classLoader.TextView.$new(this.#activity);
                logEntry.setText(this.#classLoader.String.$new(text));
                logEntry.setTextColor(this.#classLoader.Color.parseColor("#00FF00"));
                this.#logContainer.addView(logEntry, 0);
                if (this.#logContainer.getChildCount() > 50) {
                    this.#logContainer.removeViewAt(50);
                }
            });
        }
        
        clearLog() { this.#logContainer.removeAllViews(); }
        start() { this.#activity.addContentView(this.rootView, this.rootView.getLayoutParams()); }
    }

    let menu = null;
    let isHookEnabled = false;

    // --- ÁREA DE ESTUDO ---
    const targetLib = "libqplay.so";
    const functionToHook = "_ZN10MpGzgariDy10Q3v7IaUAWzERK10C8THgaTQxF"; // O "Message Handler"
    // ----------------------

    Java.perform(function () {
        try {
            const targetPointer = Module.findExportByName(targetLib, functionToHook);
            if (targetPointer) {
                Interceptor.attach(targetPointer, {
                    onEnter: function (args) {
                        if (!isHookEnabled || !menu) return;

                        // O 'this' da função é o primeiro argumento (MpGzgariDy *)
                        const this_ptr = args[0];
                        // O pacote de mensagem é o segundo argumento (C8THgaTQxF *)
                        const message_packet_ptr = args[1];

                        let messageId = "N/A";
                        let messageContent = "Não foi possível ler.";
                        
                        try {
                            // Tenta "traduzir" a mensagem como no código descompilado.
                            // C8THgaTQxF::operator[](pCVar5,1) -> acessa o segundo elemento (índice 1) do pacote
                            // O descompilador indica que o pacote pode ser tratado como um array de bytes.
                            const id_byte_ptr = message_packet_ptr.add(1); // Deslocamento de 1 byte
                            const id_byte = id_byte_ptr.readU8();
                            messageId = id_byte - 0x20; // O cálculo que vimos: uVar18 - 0x20
                            
                            // Faz um hexdump do pacote para vermos o conteúdo bruto
                            messageContent = hexdump(message_packet_ptr, { length: 32 });
                        } catch(e) {
                            messageId = "Erro";
                            messageContent = e.message;
                        }

                        let logMessage = `[MSG RECEBIDA] ID: ${messageId} (0x${messageId.toString(16)})\n`;
                        logMessage += `  -> This Ptr: ${this_ptr}\n`;
                        logMessage += `  -> Pacote @ ${message_packet_ptr}:\n${messageContent}`;
                        
                        menu.addLog(logMessage);
                    }
                });
            } else { console.error(`[!] Erro: Função ${functionToHook} não encontrada.`); }
        } catch (error) { console.error(`[!] Erro ao hookar função: ${error.message}`); }

        Java.scheduleOnMainThread(function () {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity(classLoader);
            
            menu = new Menu(classLoader, mainActivity, "Message Logger", 320, "#B318122B");  
            menu.setOptionColors("#B3443C68", "#B3393053");

            const call_toggleHook = {
                on() { isHookEnabled = true; menu.addLog("Logger de Mensagens ATIVADO."); },
                off() { isHookEnabled = false; menu.addLog("Logger de Mensagens DESATIVADO."); }
            };

            menu.addOption("toggleHook", "Ligar/Desligar Log", call_toggleHook);
            menu.addButton("Limpar Log", () => { menu.clearLog(); });

            menu.start();
        });
    });

}, 5000);
