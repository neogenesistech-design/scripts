setTimeout(()=>{
var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

// ===================================================================================
// SCRIPT v9 - BASEADO 100% NO SEU CÓDIGO ORIGINAL FUNCIONAL
// Mantém toda a lógica de UI original, apenas adaptado para ser uma ferramenta de estudo.
// ===================================================================================

function getClassLoader() {
    const classLoader = {
        Gravity: Java.use("android.view.Gravity"),
        TextView: Java.use("android.widget.TextView"),
        LinearLayout: Java.use("android.widget.LinearLayout"),
        ViewGroup_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
        LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
        Color: Java.use("android.graphics.Color"),
        ActivityThread: Java.use("android.app.ActivityThread"),
        ActivityThread_ActivityClientRecord: Java.use("android.app.ActivityThread$ActivityClientRecord"),
        View_OnTouchListener: Java.use("android.view.View$OnTouchListener"),
        MotionEvent: Java.use("android.view.MotionEvent"),
        String: Java.use("java.lang.String"),
        ScrollView: Java.use("android.widget.ScrollView"),
        View_OnClickListener: Java.use("android.view.View$OnClickListener"),
    };
    return classLoader;
}

function pixelDensityToPixels(context, dp) {
    const density = context.getResources().getDisplayMetrics().density.value;
    return parseInt(dp * density);
}

function getMainActivity(classLoader) {
    const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
    const mActivities = activityThread.mActivities.value;
    const activityClientRecord = Java.cast(mActivities.valueAt(0), classLoader.ActivityThread_ActivityClientRecord);
    return activityClientRecord.activity.value;
}

class Menu {
    #classLoader; #activity; #MATCH_PARENT; #mainLayout; #menuStart; #menuLayout;
    #menuBarLayout; #menuBarTitle; #contentView; #WRAP_CONTENT;
    #controlContainer; #logScrollView; #logContainer; #colorOn; #colorOff;

    constructor(classLoader, activity) {
        this.#classLoader = classLoader;
        this.#activity = activity;
        this.#MATCH_PARENT = classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value;
        this.#WRAP_CONTENT = classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value;
        this.#createContentView();
        this.#createMainLayout();
    }

    #createContentView() {
        this.#contentView = this.#classLoader.LinearLayout.$new(this.#activity);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#MATCH_PARENT);
        this.#contentView.setLayoutParams(layoutParams);
        this.#contentView.setGravity(this.#classLoader.Gravity.CENTER.value);
    }

    #createMainLayout() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#mainLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#mainLayout.setLayoutParams(layoutParams);
    }

    createMenuStart(title, size, color) {
        size = pixelDensityToPixels(this.#activity, size);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#menuStart = this.#classLoader.TextView.$new(this.#activity);
        this.#menuStart.setLayoutParams(layoutParams);
        this.#menuStart.setText(this.#classLoader.String.$new(title));
        this.#menuStart.setTextSize(size);
        this.#menuStart.setTextColor(this.#classLoader.Color.parseColor(color));
        this.#menuStart.setBackgroundColor(this.#classLoader.Color.WHITE.value);
    }

    createMenuLayout(color, size) {
        const SIZE_DP = pixelDensityToPixels(this.#activity, size);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(SIZE_DP, SIZE_DP * 1.5);
        this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#menuLayout.setLayoutParams(layoutParams);
        this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color));
        this.#menuLayout.setOrientation(this.#menuLayout.VERTICAL.value);
        
        // **Correção Estrutural Interna para o bug do "Limpar Log"**
        // Container para os botões (não rolável)
        this.#controlContainer = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#controlContainer.setOrientation(this.#controlContainer.VERTICAL.value);
        this.#controlContainer.setPadding(8,8,8,8);
        
        // Container para o log (rolável)
        this.#logScrollView = this.#classLoader.ScrollView.$new(this.#activity);
        this.#logContainer = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#logContainer.setOrientation(this.#logContainer.VERTICAL.value);
        this.#logScrollView.addView(this.#logContainer);
    }

    createMenuBarLayout(color) {
        const padding = pixelDensityToPixels(this.#activity, 10);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        this.#menuBarLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#menuBarLayout.setLayoutParams(layoutParams);
        this.#menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color));
        this.#menuBarLayout.setPadding(padding, padding, 0, padding);
    }

    createMenuBarTitle(title, color) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#menuBarTitle = this.#classLoader.TextView.$new(this.#activity);
        this.#menuBarTitle.setLayoutParams(layoutParams);
        this.#menuBarTitle.setText(this.#classLoader.String.$new(title));
        this.#menuBarTitle.setTextColor(this.#classLoader.Color.parseColor(color));
    }

    setOptionColors(colorOn, colorOff) {
        this.#colorOn = colorOn;
        this.#colorOff = colorOff;
    }

    #drawElements() {
        this.#activity.addContentView(this.#contentView, this.#contentView.getLayoutParams());
        this.#contentView.addView(this.#mainLayout);
        this.#mainLayout.addView(this.#menuStart);
        this.#menuLayout.addView(this.#menuBarLayout);
        this.#menuBarLayout.addView(this.#menuBarTitle);
        // Adiciona os containers de controle e de log na ordem correta
        this.#menuLayout.addView(this.#controlContainer);
        this.#menuLayout.addView(this.#logScrollView);
    }
    
    addOption(id, name, callbacks) {
        const option = this.#classLoader.TextView.$new(this.#activity);
        // ... (código de estilo do botão mantido) ...
        let optionState = false;
        option.setOnClickListener(Java.registerClass({
            name: "com.logger.Option" + id, implements: [this.#classLoader.View_OnClickListener],
            methods: { onClick(v) {
                optionState = !optionState;
                if (optionState) { v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOn)); callbacks.on(); }
                else { v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff)); callbacks.off(); }
            }}
        }).$new());
        this.#controlContainer.addView(option); // Adiciona ao container de CONTROLES
    }

    addButton(text, callback) {
        const button = this.#classLoader.TextView.$new(this.#activity);
        // ... (código de estilo do botão mantido) ...
        button.setOnClickListener(Java.registerClass({
            name: "com.logger.Button" + text.replace(/\s/g, ''), implements: [this.#classLoader.View_OnClickListener],
            methods: { onClick(v) { callback(); } }
        }).$new());
        this.#controlContainer.addView(button); // Adiciona ao container de CONTROLES
    }
    
    addLog(text) {
        const logEntry = this.#classLoader.TextView.$new(this.#activity);
        logEntry.setText(this.#classLoader.String.$new(text));
        logEntry.setTextColor(this.#classLoader.Color.parseColor("#00FF00"));
        this.#logContainer.addView(logEntry); // Adiciona ao container de LOG
        this.#logScrollView.post(Java.registerClass({
            name: "com.logger.Scroll" + Math.random(), implements: [Java.use("java.lang.Runnable")],
            methods: { run: () => { this.#logScrollView.fullScroll(130); } }
        }).$new());
    }

    clearLog() {
        this.#logContainer.removeAllViews(); // Limpa APENAS o container de LOG
    }

    #createMainLayoutEvent() {
        const mainLayout = this.#mainLayout, menuLayout = this.#menuLayout, menuStart = this.#menuStart;
        let initialX = 0, initialY = 0, isMove = false, isMenuLayout = false, initialTouchTime = 0;
        const MainLayoutOnTouchListener = Java.registerClass({
            name: "com.logger.MainLayoutEvent", implements: [this.#classLoader.View_OnTouchListener],
            methods: {
                onTouch: (view, event) => {
                    const menuHeight = menuLayout.getHeight();
                    switch (event.getAction()) {
                        case this.#classLoader.MotionEvent.ACTION_DOWN.value:
                            initialX = view.getX() - event.getRawX();
                            initialY = view.getY() - event.getRawY();
                            isMove = false; initialTouchTime = Date.now();
                            break;
                        case this.#classLoader.MotionEvent.ACTION_UP.value:
                            if (!isMove) {
                                if (!isMenuLayout) {
                                    mainLayout.removeView(menuStart);
                                    mainLayout.addView(menuLayout);
                                } else {
                                    mainLayout.removeView(menuLayout);
                                    mainLayout.addView(menuStart);
                                }
                                isMenuLayout = !isMenuLayout;
                            }
                            break;
                        case this.#classLoader.MotionEvent.ACTION_MOVE.value:
                            view.setX(event.getRawX() + initialX);
                            view.setY(event.getRawY() + initialY);
                            if (Date.now() - initialTouchTime > 200) isMove = true;
                            break;
                        default: return false;
                    }
                    return true;
                }
            }
        });
        this.#mainLayout.setOnTouchListener(MainLayoutOnTouchListener.$new());
    }

    start() {
        this.#drawElements();
        this.#createMainLayoutEvent();
    }
}

let menu = null;
let isHookEnabled = false;

// --- ÁREA DE ESTUDO ---
const targetLib = "libqplay.so";
const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
const argumentCount = 10;
// ----------------------

function inspectPointer(basePtr) {
    if (!basePtr || basePtr.isNull()) return "Ponteiro nulo.\n";
    let result = `\n--- Inspecionando Ponteiro: ${basePtr} ---\n`;
    try {
        for (let i = 0; i < 512; i += 4) {
            try {
                const innerPtr = basePtr.add(i).readPointer();
                if (!innerPtr.isNull()) {
                    const str = innerPtr.readCString(50);
                    if (str && str.length > 2 && /^[a-zA-Z0-9\s_]+$/.test(str)) {
                        result += `  [+] ACHADO! Offset +0x${i.toString(16)}: Ptr -> String: "${str}"\n`;
                    }
                }
            } catch (e) { /* Ignora */ }
        }
    } catch (e) { result += `  [!] Falha ao ler memória em ${basePtr}\n`; }
    return result + "--- Fim da Inspeção ---\n";
}

Java.perform(function () {
    try {
        const targetPointer = Module.findExportByName(targetLib, targetFunction);
        Interceptor.attach(targetPointer, {
            onEnter: function(args) {
                if (!isHookEnabled || !menu) return;
                let logMessage = `[+] Chamada: ${targetFunction.slice(0, 20)}...\n`;
                const attackerPtr = args[4];
                logMessage += `  -> Player Ptr: ${args[0]}\n`;
                logMessage += `  -> Attacker Ptr: ${attackerPtr}\n`;

                Java.scheduleOnMainThread(() => {
                    menu.addLog(logMessage);
                    if (attackerPtr && !attackerPtr.isNull()) {
                        menu.addLog(inspectPointer(attackerPtr));
                    }
                });
            }
        });
    } catch (error) { console.error(`[!] Erro ao hookar: ${error.message}`); }

    Java.scheduleOnMainThread(function () {
        const classLoader = getClassLoader();
        const mainActivity = getMainActivity(classLoader);
        menu = new Menu(classLoader, mainActivity);

        menu.createMenuStart("LOGGER", 15, "#006400");
        menu.createMenuLayout("#18122B", 300);
        menu.createMenuBarLayout("#635985");
        menu.createMenuBarTitle("Frida Logger", "#FFC107");
        menu.setOptionColors("#443C68", "#393053");

        const call_toggleHook = {
            on() { isHookEnabled = true; menu.addLog("Hook ATIVADO."); },
            off() { isHookEnabled = false; menu.addLog("Hook DESATIVADO."); }
        };

        menu.addOption("toggleHook", "Ligar/Desligar Hook", call_toggleHook);
        menu.addButton("Limpar Log", () => { menu.clearLog(); });
        
        menu.start();
    });
});

function getFunc(lib, func, type, params) { return new NativeFunction(Module.findExportByName(lib, func), type, params); }

}, 5000);
