setTimeout(() => {
    // ===================================================================================
    // SCRIPT-MODELO v13 - Argumentos dinâmicos para a função de bloqueio
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View: Java.use("android.view.View"),
        };
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    function getMainActivity(classLoader) {
        const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        const activityClientRecord = Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord"));
        return activityClientRecord.activity.value;
    }

    class Menu {
        #classLoader; #activity;
        #menuLayout; #controlContainer; #logContainer; #logScrollView;
        #colorOn; #colorOff;
        #isExpanded = true;

        constructor(classLoader, activity, title, width, bgColor) {
            this.#classLoader = classLoader;
            this.#activity = activity;
            this.#createStaticLayout(title, width, bgColor);
        }

        #createStaticLayout(title, width, bgColor) {
            const MATCH = -1;
            const WRAP = -2;
            const widthDp = pixelDensityToPixels(this.#activity, width);

            const rootView = this.#classLoader.LinearLayout.$new(this.#activity);
            rootView.setLayoutParams(this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, MATCH));
            rootView.setGravity(this.#classLoader.Gravity.LEFT.value);
            this.rootView = rootView;

            this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            const menuParams = this.#classLoader.LinearLayout_LayoutParams.$new(widthDp, WRAP);
            this.#menuLayout.setLayoutParams(menuParams);
            this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(bgColor));
            this.#menuLayout.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);

            const menuBarLayout = this.#classLoader.TextView.$new(this.#activity);
            menuBarLayout.setText(this.#classLoader.String.$new(title));
            menuBarLayout.setTextColor(this.#classLoader.Color.parseColor("#FFC107"));
            menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor("#B3635985"));
            menuBarLayout.setGravity(this.#classLoader.Gravity.CENTER.value);
            menuBarLayout.setPadding(10, 10, 10, 10);
            this.#menuLayout.addView(menuBarLayout);

            this.#controlContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#controlContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#controlContainer.setPadding(8, 8, 8, 8);
            this.#menuLayout.addView(this.#controlContainer);

            this.#logScrollView = this.#classLoader.ScrollView.$new(this.#activity);
            this.#logScrollView.setLayoutParams(this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, pixelDensityToPixels(this.#activity, 300)));
            this.#logContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#logContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#logContainer.setPadding(8, 8, 8, 8);
            this.#logScrollView.addView(this.#logContainer);
            this.#menuLayout.addView(this.#logScrollView);

            const self = this;
            const View = this.#classLoader.View;
            menuBarLayout.setOnClickListener(Java.registerClass({
                name: "com.logger.ToggleClickListener" + Math.random().toString().replace(".", ""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick(v) {
                        self.#isExpanded = !self.#isExpanded;
                        const visibility = self.#isExpanded ? View.VISIBLE.value : View.GONE.value;
                        self.#controlContainer.setVisibility(visibility);
                        self.#logScrollView.setVisibility(visibility);
                    }
                }
            }).$new());
            
            this.rootView.addView(this.#menuLayout);
        }

        setOptionColors(colorOn, colorOff) { this.#colorOn = colorOn; this.#colorOff = colorOff; }

        addOption(id, name, callbacks) {
            const option = this.#classLoader.TextView.$new(this.#activity);
            option.setText(this.#classLoader.String.$new(name));
            option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            option.setTextColor(this.#classLoader.Color.WHITE.value);
            option.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            option.setLayoutParams(params);
            option.setPadding(10, 10, 10, 10);
            let state = false;
            option.setOnClickListener(Java.registerClass({
                name: "com.logger.OptionClick" + id,
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick: (v) => {
                        state = !state;
                        v.setBackgroundColor(this.#classLoader.Color.parseColor(state ? this.#colorOn : this.#colorOff));
                        if (state) callbacks.on(); else callbacks.off();
                    }
                }
            }).$new());
            this.#controlContainer.addView(option);
        }

        addButton(text, callback) {
            const button = this.#classLoader.TextView.$new(this.#activity);
            button.setText(this.#classLoader.String.$new(text));
            button.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            button.setTextColor(this.#classLoader.Color.WHITE.value);
            button.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            button.setLayoutParams(params);
            button.setPadding(10, 10, 10, 10);
            button.setOnClickListener(Java.registerClass({
                name: "com.logger.ButtonClick" + text.replace(" ", ""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: { onClick: (v) => callback() }
            }).$new());
            this.#controlContainer.addView(button);
        }

        addLog(text) {
            Java.scheduleOnMainThread(() => {
                const logEntry = this.#classLoader.TextView.$new(this.#activity);
                logEntry.setText(this.#classLoader.String.$new(text));
                logEntry.setTextColor(this.#classLoader.Color.parseColor("#00FF00"));
                this.#logContainer.addView(logEntry, 0);
                if (this.#logContainer.getChildCount() > 50) {
                    this.#logContainer.removeViewAt(50);
                }
            });
        }
        
        clearLog() { this.#logContainer.removeAllViews(); }
        start() { this.#activity.addContentView(this.rootView, this.rootView.getLayoutParams()); }
    }

    let menu = null;
    let isHookEnabled = false;
    let infiniteItems = false;

    // --- ÁREA DE ESTUDO ---
    const targetLib = "libqplay.so";
    const targetFunctionLog = "_ZN10SsrLga3IwI10gdghIaQf8REP10G0gxgajWBw";
    const targetFunctionBlock = "_ZN10SsrLga3IwI10gdghIaQf8REP10G0gxgajWBw";
    const argumentCount = 10; // Ajuste conforme necessário
    // ----------------------

    let originalItemCounterFunc = null;

    Java.perform(function () {
        try {
            const targetPointerLog = Module.findExportByName(targetLib, targetFunctionLog);
            if (targetPointerLog) {
                Interceptor.attach(targetPointerLog, {
                    onEnter: function (args) {
                        if (!isHookEnabled || !menu) return;
                        let logMessage = `[+] Chamada: ${targetFunctionLog.slice(0, 20)}...\n`;
                        for (let i = 0; i < argumentCount; i++) {
                            try {
                                logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                            } catch(e) {
                                break; // Para se o número de argumentos for menor que o esperado
                            }
                        }
                        menu.addLog(logMessage);
                    }
                });
            } else { console.error(`[!] Erro de Log: Função ${targetFunctionLog} não encontrada.`); }
        } catch (error) { console.error(`[!] Erro ao hookar função de log: ${error.message}`); }

        try {
            const targetPointerBlock = Module.findExportByName(targetLib, targetFunctionBlock);
            if (targetPointerBlock) {
                
                // ALTERADO: Cria uma lista de tipos de argumento dinamicamente
                const argTypes = [];
                for (let i = 0; i < argumentCount; i++) {
                    argTypes.push('pointer'); // Assume 'pointer' como tipo genérico para todos
                }

                // ALTERADO: Usa a lista de tipos dinâmica para definir a função original
                originalItemCounterFunc = new NativeFunction(targetPointerBlock, 'void', argTypes);
                
                // ALTERADO: Usa a lista de tipos e a sintaxe '...args' para lidar com múltiplos argumentos
                Interceptor.replace(targetPointerBlock, new NativeCallback((...args) => {
                    if (infiniteItems) {
                        if (menu) menu.addLog("[!] Bloqueada contagem de item!");
                        return; // Impede a execução da função original
                    }
                    // Chama a função original passando todos os argumentos recebidos
                    originalItemCounterFunc(...args);
                }, 'void', argTypes));

            } else { console.error(`[!] Erro de Bloqueio: Função ${targetFunctionBlock} não encontrada.`); }
        } catch (error) { console.error(`[!] Erro ao hookar função de bloqueio: ${error.message}`); }

        Java.scheduleOnMainThread(function () {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity(classLoader);
            
            menu = new Menu(classLoader, mainActivity, "Frida Logger", 280, "#B318122B");  
            menu.setOptionColors("#B3443C68", "#B3393053");

            const call_toggleHook = {
                on() { isHookEnabled = true; menu.addLog("Hook de Log ATIVADO."); },
                off() { isHookEnabled = false; menu.addLog("Hook de Log DESATIVADO."); }
            };

            const call_infiniteItems = {
                on() { infiniteItems = true; menu.addLog("Itens Infinitos ATIVADO."); },
                off() { infiniteItems = false; menu.addLog("Itens Infinitos DESATIVADO."); }
            };

            menu.addOption("toggleHook", "Ligar/Desligar Log", call_toggleHook);
            menu.addOption("infiniteItems", "Itens Infinitos", call_infiniteItems);
            menu.addButton("Limpar Log", () => { menu.clearLog(); });

            menu.start();
        });
    });

}, 5000);
