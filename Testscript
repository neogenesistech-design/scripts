setTimeout(()=>{
var malloc = getFunc("libc.so", "malloc", "pointer", ["int"]);

// ===================================================================================
// SCRIPT-MODELO v5 - FERRAMENTA DE ESTUDO USANDO O SEU FORMATO DE MENU ORIGINAL
// ===================================================================================

function getClassLoader() {
    const classLoader = {
        Gravity: Java.use("android.view.Gravity"),
        TextView: Java.use("android.widget.TextView"),
        LinearLayout: Java.use("android.widget.LinearLayout"),
        ViewGroup_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
        LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
        Color: Java.use("android.graphics.Color"),
        ActivityThread: Java.use("android.app.ActivityThread"),
        ActivityThread_ActivityClientRecord: Java.use("android.app.ActivityThread$ActivityClientRecord"),
        View_OnTouchListener: Java.use("android.view.View$OnTouchListener"),
        MotionEvent: Java.use("android.view.MotionEvent"),
        String: Java.use("java.lang.String"),
        ScrollView: Java.use("android.widget.ScrollView"),
        View_OnClickListener: Java.use("android.view.View$OnClickListener"),
    };
    return classLoader;
}

function pixelDensityToPixels(context, dp) {
    const density = context.getResources().getDisplayMetrics().density.value;
    return parseInt(dp * density);
}

function getMainActivity(classLoader) {
    const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
    const mActivities = activityThread.mActivities.value;
    const activityClientRecord = Java.cast(mActivities.valueAt(0), classLoader.ActivityThread_ActivityClientRecord);
    return activityClientRecord.activity.value;
}

// A SUA CLASSE DE MENU ORIGINAL, ADAPTADA PARA O LOGGER
class Menu {
    #classLoader; #activity; #MATCH_PARENT; #mainLayout; #menuStart; #menuLayout;
    #menuBarLayout; #menuBarTitle; #menuScrollView; #contentView;
    #WRAP_CONTENT; #menuScrollLayout; #colorOn; #colorOff;

    constructor(classLoader, activity) {
        this.#classLoader = classLoader;
        this.#activity = activity;
        this.#MATCH_PARENT = classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value;
        this.#WRAP_CONTENT = classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value;
        this.#createContentView();
        this.#createMainLayout();
        this.#createMenuScroll();
    }

    #createContentView() {
        this.#contentView = this.#classLoader.LinearLayout.$new(this.#activity);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#MATCH_PARENT);
        this.#contentView.setLayoutParams(layoutParams);
        this.#contentView.setGravity(this.#classLoader.Gravity.CENTER.value);
    }

    #createMainLayout() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#mainLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#mainLayout.setLayoutParams(layoutParams);
    }

    #createMenuScroll() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        this.#menuScrollView = this.#classLoader.ScrollView.$new(this.#activity);
        const padding = pixelDensityToPixels(this.#activity, 8);
        this.#menuScrollView.setLayoutParams(layoutParams);
        this.#menuScrollView.setPadding(padding, padding, padding, padding);
    }

    #createMenuScrollLayout() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#MATCH_PARENT);
        this.#menuScrollLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#menuScrollLayout.setLayoutParams(layoutParams);
        this.#menuScrollLayout.setOrientation(this.#menuScrollLayout.VERTICAL.value);
    }

    createMenuOptionsLayout(colorOn, colorOff) {
        this.#createMenuScrollLayout();
        this.#colorOn = colorOn;
        this.#colorOff = colorOff;
    }

    createMenuStart(title, size, color) {
        size = pixelDensityToPixels(this.#activity, size);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#menuStart = this.#classLoader.TextView.$new(this.#activity);
        this.#menuStart.setLayoutParams(layoutParams);
        this.#menuStart.setText(this.#classLoader.String.$new(title));
        this.#menuStart.setTextSize(size);
        this.#menuStart.setTextColor(this.#classLoader.Color.parseColor(color));
        this.#menuStart.setBackgroundColor(this.#classLoader.Color.WHITE.value);
    }

    createMenuLayout(color, size) {
        const SIZE_DP = pixelDensityToPixels(this.#activity, size);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(SIZE_DP, SIZE_DP * 1.5); // Um pouco mais alto que largo
        this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#menuLayout.setLayoutParams(layoutParams);
        this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color));
        this.#menuLayout.setOrientation(this.#menuLayout.VERTICAL.value);
    }

    createMenuBarLayout(color) {
        const padding = pixelDensityToPixels(this.#activity, 10);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        this.#menuBarLayout = this.#classLoader.LinearLayout.$new(this.#activity);
        this.#menuBarLayout.setLayoutParams(layoutParams);
        this.#menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color));
        this.#menuBarLayout.setPadding(padding, padding, 0, padding);
    }

    createMenuBarTitle(title, color) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        this.#menuBarTitle = this.#classLoader.TextView.$new(this.#activity);
        this.#menuBarTitle.setLayoutParams(layoutParams);
        this.#menuBarTitle.setText(this.#classLoader.String.$new(title));
        this.#menuBarTitle.setTextColor(this.#classLoader.Color.parseColor(color));
    }

    #drawElements() {
        this.#activity.addContentView(this.#contentView, this.#contentView.getLayoutParams());
        this.#contentView.addView(this.#mainLayout);
        this.#mainLayout.addView(this.#menuStart);
        this.#menuLayout.addView(this.#menuBarLayout);
        this.#menuBarLayout.addView(this.#menuBarTitle);
        this.#menuLayout.addView(this.#menuScrollView);
        this.#menuScrollView.addView(this.#menuScrollLayout);
    }

    addOption(id, name, callbacks) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        const padding = pixelDensityToPixels(this.#activity, 5);
        const option = this.#classLoader.TextView.$new(this.#activity);
        const margin = pixelDensityToPixels(this.#activity, 10);
        option.setText(this.#classLoader.String.$new(name));
        option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
        option.setTextColor(this.#classLoader.Color.parseColor("#75757B"));
        option.setGravity(this.#classLoader.Gravity.CENTER.value);
        layoutParams.setMargins(0, 0, 0, margin);
        option.setLayoutParams(layoutParams);
        option.setPadding(padding, padding, padding, padding);

        let optionState = false;
        const optionOnClickListener = Java.registerClass({
            name: "com.example." + id,
            implements: [this.#classLoader.View_OnClickListener],
            methods: {
                onClick(p1) {
                    optionState = !optionState;
                    if (optionState) {
                        p1.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOn));
                        callbacks.on();
                    } else {
                        p1.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
                        callbacks.off();
                    }
                }
            }
        });
        option.setOnClickListener(optionOnClickListener.$new());
        this.#menuScrollLayout.addView(option);
    }
    
    // --- MÉTODOS ADICIONADOS PARA O LOGGER ---
    addLog(text) {
        const textView = this.#classLoader.TextView.$new(this.#activity);
        textView.setText(this.#classLoader.String.$new(text));
        textView.setTextColor(this.#classLoader.Color.parseColor("#00FF00")); // Verde
        this.#menuScrollLayout.addView(textView);
        // Auto-scroll
        this.#menuScrollView.post(Java.registerClass({
            name: "com.logger.ScrollRunnable" + Math.random().toString(36).substring(2),
            implements: [Java.use("java.lang.Runnable")],
            methods: { run: () => { this.#menuScrollView.fullScroll(130); } }
        }).$new());
    }

    clearLog() { this.#menuScrollLayout.removeAllViews(); }

    addButton(text, callback) {
        const button = this.#classLoader.TextView.$new(this.#activity);
        button.setText(this.#classLoader.String.$new(text));
        button.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
        button.setTextColor(this.#classLoader.Color.parseColor("#75757B"));
        button.setGravity(this.#classLoader.Gravity.CENTER.value);
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        const margin = pixelDensityToPixels(this.#activity, 10);
        layoutParams.setMargins(0, 0, 0, margin);
        button.setLayoutParams(layoutParams);
        button.setPadding(5,5,5,5);
        button.setOnClickListener(Java.registerClass({
            name: "com.logger.ButtonListener" + Math.random().toString(36).substring(2),
            implements: [this.#classLoader.View_OnClickListener],
            methods: { onClick(v) { callback(); } }
        }).$new());
        this.#menuScrollLayout.addView(button);
    }
    // --- FIM DOS MÉTODOS ADICIONADOS ---

    #createMainLayoutEvent() {
        const mainLayout = this.#mainLayout;
        const menuLayout = this.#menuLayout;
        const menuStart = this.#menuStart;
        let isMove = false;
        let isMenuLayout = false;
        const MainLayoutOnTouchListener = Java.registerClass({
            name: "com.logger.MainLayoutEvent",
            implements: [this.#classLoader.View_OnTouchListener],
            methods: {
                onTouch(view, event) {
                    switch (event.getAction()) {
                        case this.#classLoader.MotionEvent.ACTION_DOWN.value:
                            isMove = false;
                            return true; // Importante para receber ACTION_UP
                        case this.#classLoader.MotionEvent.ACTION_UP.value:
                            if (!isMove) {
                                isMenuLayout = !isMenuLayout;
                                if (isMenuLayout) {
                                    mainLayout.removeView(menuStart);
                                    mainLayout.addView(menuLayout);
                                } else {
                                    mainLayout.removeView(menuLayout);
                                    mainLayout.addView(menuStart);
                                }
                            }
                            return true;
                        case this.#classLoader.MotionEvent.ACTION_MOVE.value:
                            isMove = true;
                            // A lógica de arrastar foi removida para simplificar e garantir o clique.
                            // Se precisar, ela pode ser adicionada aqui.
                            break;
                    }
                    return false;
                }
            }
        });
        // Simplificação: o clique é no próprio botão de start, não no container
        this.#menuStart.setOnTouchListener(MainLayoutOnTouchListener.$new());
        this.#menuBarLayout.setOnTouchListener(MainLayoutOnTouchListener.$new());
    }

    start() {
        this.#drawElements();
        // A lógica de arrastar foi simplificada para a de clique/toque.
        // O evento de toque agora é para abrir/fechar.
        let isMenuLayout = false;
        
        const toggleMenu = () => {
            isMenuLayout = !isMenuLayout;
            if(isMenuLayout) {
                this.#mainLayout.removeView(this.#menuStart);
                this.#mainLayout.addView(this.#menuLayout);
            } else {
                this.#mainLayout.removeView(this.#menuLayout);
                this.#mainLayout.addView(this.#menuStart);
            }
        };

        this.#menuStart.setOnClickListener(Java.registerClass({
            name: "com.logger.MenuStartClick",
            implements: [this.#classLoader.View_OnClickListener],
            methods: { onClick(v) { toggleMenu(); } }
        }).$new());
        
        this.#menuBarLayout.setOnClickListener(Java.registerClass({
            name: "com.logger.MenuBarClick",
            implements: [this.#classLoader.View_OnClickListener],
            methods: { onClick(v) { toggleMenu(); } }
        }).$new());
    }
}

let menu = null;
let isHookEnabled = false;

// ===============================================================================
// --- ÁREA DE ESTUDO ---
// Altere as variáveis abaixo para hookar a função desejada.
// ===============================================================================
const targetLib = "libqplay.so";
const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
const argumentCount = 6; // <-- MUDE AQUI o número de argumentos da função
// ===============================================================================

Java.perform(function () {
    try {
        const targetPointer = Module.findExportByName(targetLib, targetFunction);
        if (targetPointer) {
            Interceptor.attach(targetPointer, {
                onEnter: function(args) {
                    if (!isHookEnabled || !menu) return;
                    
                    let logMessage = `[+] Chamada para ${targetFunction.slice(0, 20)}...\n`;
                    for (let i = 0; i < argumentCount; i++) {
                        logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                    }

                    Java.scheduleOnMainThread(() => {
                        menu.addLog(logMessage);
                    });
                }
            });
        } else {
            console.log(`[!] Função não encontrada: ${targetFunction}`);
        }
    } catch (error) {
        console.error(`[!] Erro ao hookar a função: ${targetFunction}`);
    }

    Java.scheduleOnMainThread(function () {
        const classLoader = getClassLoader();
        const mainActivity = getMainActivity(classLoader);
        menu = new Menu(classLoader, mainActivity);

        menu.createMenuStart("LOGGER", 15, "#006400");
        menu.createMenuLayout("#18122B", 250); // Largura do menu
        menu.createMenuBarLayout("#635985");
        menu.createMenuBarTitle("Frida Logger", "#FFC107");
        menu.createMenuOptionsLayout("#443C68", "#393053");

        const call_toggleHook = {
            on() { isHookEnabled = true; menu.addLog("Hook LIGADO."); },
            off() { isHookEnabled = false; menu.addLog("Hook DESLIGADO."); }
        };

        menu.addOption("toggleHook", "Ligar/Desligar Hook", call_toggleHook);
        menu.addButton("Limpar Log", () => {
            menu.clearLog();
        });
        
        menu.start();
    });
});

function getFunc(lib, func, type, params) {
  return new NativeFunction(Module.findExportByName(lib, func), type, params);
}

// Funções createTString e readTString não são necessárias para o logger, mas podem ser mantidas se precisar delas.
function createTString(str) {
  var str_pointer = malloc(4);
  var str_struct = malloc(str.length + 8);
  str_pointer.writePointer(str_struct);
  str_struct.writeInt(str.length);
  ptr(parseInt(str_struct) + 4).writeInt(1);
  ptr(parseInt(str_struct) + 8).writeUtf8String(str);
  return str_pointer;
}

function readTString(str) {
  if (!str.isNull()) {
      if (parseInt(str) != 0) {
          var pstr = str.readPointer();
          if (!pstr.isNull()) {
              var strlen = pstr.readInt();
              if (strlen > 0) {
                  var strStart = parseInt(pstr) + 8;
                  return ptr(strStart).readCString(strlen);
              }
          }
      }
  }
}

}, 5000);
