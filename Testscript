setTimeout(() => {
    // ===================================================================================
    // SCRIPT-MODELO v9 - LAYOUT RETRÁTIL AO CLICAR NO TÍTULO
    // ===================================================================================

    function getClassLoader() {
        return {
            Gravity: Java.use("android.view.Gravity"),
            TextView: Java.use("android.widget.TextView"),
            LinearLayout: Java.use("android.widget.LinearLayout"),
            LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
            Color: Java.use("android.graphics.Color"),
            ActivityThread: Java.use("android.app.ActivityThread"),
            View_OnClickListener: Java.use("android.view.View$OnClickListener"),
            String: Java.use("java.lang.String"),
            ScrollView: Java.use("android.widget.ScrollView"),
            View: Java.use("android.view.View"), // Adicionado para controlar a visibilidade
        };
    }

    function pixelDensityToPixels(context, dp) {
        const density = context.getResources().getDisplayMetrics().density.value;
        return parseInt(dp * density);
    }

    function getMainActivity(classLoader) {
        const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value;
        const mActivities = activityThread.mActivities.value;
        const activityClientRecord = Java.cast(mActivities.valueAt(0), Java.use("android.app.ActivityThread$ActivityClientRecord"));
        return activityClientRecord.activity.value;
    }

    class Menu {
        #classLoader;
        #activity;
        #controlContainer;
        #logScrollView;
        #colorOn;
        #colorOff;
        #isExpanded = true; // Novo estado para controlar se o menu está expandido

        constructor(classLoader, activity, title, width, bgColor) {
            this.#classLoader = classLoader;
            this.#activity = activity;
            this.#createStaticLayout(title, width, bgColor);
        }

        #toggleVisibility() {
            this.#isExpanded = !this.#isExpanded; // Inverte o estado
            const visibility = this.#isExpanded ? this.#classLoader.View.VISIBLE.value : this.#classLoader.View.GONE.value;

            // Altera a visibilidade dos containers de controle e log
            this.#controlContainer.setVisibility(visibility);
            this.#logScrollView.setVisibility(visibility);
        }

        #createStaticLayout(title, width, bgColor) {
            const MATCH = -1;
            const WRAP = -2; // Constante para WRAP_CONTENT
            const widthDp = pixelDensityToPixels(this.#activity, width);

            const rootView = this.#classLoader.LinearLayout.$new(this.#activity);
            rootView.setLayoutParams(this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, MATCH));
            rootView.setGravity(this.#classLoader.Gravity.LEFT.value);
            this.rootView = rootView;

            const menuLayout = this.#classLoader.LinearLayout.$new(this.#activity);
            // A altura agora é WRAP_CONTENT para que o layout encolha quando o conteúdo for escondido
            const menuParams = this.#classLoader.LinearLayout_LayoutParams.$new(widthDp, WRAP);
            menuLayout.setLayoutParams(menuParams);
            menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(bgColor));
            menuLayout.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);

            const menuBarLayout = this.#classLoader.TextView.$new(this.#activity);
            menuBarLayout.setText(this.#classLoader.String.$new(title));
            menuBarLayout.setTextColor(this.#classLoader.Color.parseColor("#FFC107"));
            menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor("#B3635985"));
            menuBarLayout.setGravity(this.#classLoader.Gravity.CENTER.value);
            menuBarLayout.setPadding(10, 10, 10, 10);
            
            // --- LÓGICA DE CLIQUE ADICIONADA AQUI ---
            const self = this;
            menuBarLayout.setOnClickListener(Java.registerClass({
                name: "com.logger.TitleClickListener" + Math.random().toString().replace(".",""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick: function(v) {
                        self.#toggleVisibility();
                    }
                }
            }).$new());
            // --- FIM DA LÓGICA DE CLIQUE ---

            menuLayout.addView(menuBarLayout);

            this.#controlContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#controlContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#controlContainer.setPadding(8, 8, 8, 8);
            menuLayout.addView(this.#controlContainer);

            this.#logScrollView = this.#classLoader.ScrollView.$new(this.#activity);
            // A altura da área de log agora precisa ter um peso para preencher o espaço restante
            const scrollParams = this.#classLoader.LinearLayout_LayoutParams.$new(MATCH, MATCH);
            scrollParams.weight = 1.0;
            this.#logScrollView.setLayoutParams(scrollParams);
            this.#logScrollView.setMinimumHeight(pixelDensityToPixels(this.#activity, 200)); // Define uma altura mínima
            
            this.#logContainer = this.#classLoader.LinearLayout.$new(this.#activity);
            this.#logContainer.setOrientation(this.#classLoader.LinearLayout.VERTICAL.value);
            this.#logContainer.setPadding(8, 8, 8, 8);
            this.#logScrollView.addView(this.#logContainer);
            menuLayout.addView(this.#logScrollView);

            this.rootView.addView(menuLayout);
        }

        // Métodos addOption, addButton, etc. permanecem inalterados...
        setOptionColors(colorOn, colorOff) {
            this.#colorOn = colorOn;
            this.#colorOff = colorOff;
        }

        addOption(id, name, callbacks) {
            const option = this.#classLoader.TextView.$new(this.#activity);
            option.setText(this.#classLoader.String.$new(name));
            option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            option.setTextColor(this.#classLoader.Color.WHITE.value);
            option.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            option.setLayoutParams(params);
            option.setPadding(10, 10, 10, 10);

            let state = false;
            option.setOnClickListener(Java.registerClass({
                name: "com.logger.OptionClick" + id,
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick: (v) => {
                        state = !state;
                        if (state) {
                            v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOn));
                            callbacks.on();
                        } else {
                            v.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
                            callbacks.off();
                        }
                    }
                }
            }).$new());
            this.#controlContainer.addView(option);
        }

        addButton(text, callback) {
            const button = this.#classLoader.TextView.$new(this.#activity);
            button.setText(this.#classLoader.String.$new(text));
            button.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            button.setTextColor(this.#classLoader.Color.WHITE.value);
            button.setGravity(this.#classLoader.Gravity.CENTER.value);
            const params = this.#classLoader.LinearLayout_LayoutParams.$new(-1, -2);
            params.setMargins(0, 5, 0, 5);
            button.setLayoutParams(params);
            button.setPadding(10, 10, 10, 10);
            button.setOnClickListener(Java.registerClass({
                name: "com.logger.ButtonClick" + text.replace(" ", ""),
                implements: [this.#classLoader.View_OnClickListener],
                methods: {
                    onClick: (v) => callback()
                }
            }).$new());
            this.#controlContainer.addView(button);
        }

        addLog(text) {
            const logEntry = this.#classLoader.TextView.$new(this.#activity);
            logEntry.setText(this.#classLoader.String.$new(text));
            logEntry.setTextColor(this.#classLoader.Color.parseColor("#00FF00"));
            this.#logContainer.addView(logEntry);

            this.#logScrollView.post(Java.registerClass({
                name: "com.logger.Scroll" + Math.random().toString().replace(".", ""),
                implements: [Java.use("java.lang.Runnable")],
                methods: {
                    run: () => {
                        this.#logScrollView.fullScroll(130);
                    }
                }
            }).$new());
        }

        clearLog() {
            this.#logContainer.removeAllViews();
        }

        start() {
            this.#activity.addContentView(this.rootView, this.rootView.getLayoutParams());
        }
    }

    let menu = null;
    let isHookEnabled = false;

    // --- ÁREA DE ESTUDO (inalterada) ---
    const targetLib = "libqplay.so";
    const targetFunction = "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy";
    const argumentCount = 6;
    // ----------------------

    Java.perform(function () {
        try {
            const targetPointer = Module.findExportByName(targetLib, targetFunction);
            if (targetPointer) {
                Interceptor.attach(targetPointer, {
                    onEnter: function (args) {
                        if (!isHookEnabled || !menu) return;
                        let logMessage = `[+] Chamada: ${targetFunction.slice(0, 20)}...\n`;
                        for (let i = 0; i < argumentCount; i++) {
                            logMessage += `  -> Arg[${i}]: ${args[i]}\n`;
                        }
                        Java.scheduleOnMainThread(() => {
                            menu.addLog(logMessage);
                        });
                    }
                });
            } else {
                 console.error(`[!] Erro: Função ${targetFunction} não encontrada em ${targetLib}.`);
            }
        } catch (error) {
            console.error(`[!] Erro ao hookar função: ${error.message}`);
        }

        Java.scheduleOnMainThread(function () {
            const classLoader = getClassLoader();
            const mainActivity = getMainActivity(classLoader);
            
            menu = new Menu(classLoader, mainActivity, "Frida Logger", 280, "#B318122B"); 
            menu.setOptionColors("#B3443C68", "#B3393053"); 

            const call_toggleHook = {
                on() { isHookEnabled = true; menu.addLog("Hook ATIVADO."); },
                off() { isHookEnabled = false; menu.addLog("Hook DESATIVADO."); }
            };

            menu.addOption("toggleHook", "Ligar/Desligar Hook", call_toggleHook);
            menu.addButton("Limpar Log", () => { menu.clearLog(); });

            menu.start();
        });
    });

}, 5000);
