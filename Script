setTimeout(()=>{
var malloc = getFunc("libc.so", "malloc", "pointer", ["int"])

// Variável para controlar o raio da explosão, com valor padrão 80
let explosionRadius = 80;


function getClassLoader() {
    const classLoader = {
        Gravity: Java.use("android.view.Gravity"),
        TextView: Java.use("android.widget.TextView"),
        LinearLayout: Java.use("android.widget.LinearLayout"),
        ViewGroup_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
        LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
        Color: Java.use("android.graphics.Color"),
        ActivityThread: Java.use("android.app.ActivityThread"),
        ActivityThread_ActivityClientRecord: Java.use("android.app.ActivityThread$ActivityClientRecord"),
        View_OnTouchListener: Java.use("android.view.View$OnTouchListener"),
        MotionEvent: Java.use("android.view.MotionEvent"),
        String: Java.use("java.lang.String"),
    }
    return classLoader
}

function pixelDensityToPixels(context, dp) {
    const density = context.getResources().getDisplayMetrics().density.value
    return parseInt(dp * density)
}

function getMainActivity(classLoader) {
    const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value
    const mActivities = activityThread.mActivities.value
    const activityClientRecord = Java.cast(mActivities.valueAt(0), classLoader.ActivityThread_ActivityClientRecord)
    return activityClientRecord.activity.value
}

function showToast(text, time = 1) {
  Java.perform(() => {
      Java.scheduleOnMainThread(function() {
          var toast = Java.use("android.widget.Toast");
          toast.makeText(Java.use("android.app.ActivityThread").currentApplication().getApplicationContext(), Java.use("java.lang.String").$new(text), time).show();
      });
  });
}

// A CLASSE MENU FOI COMPLETAMENTE REMOVIDA PARA DAR LUGAR À NOVA INTERFACE

const activeplayer = Module.findExportByName("libqplay.so", "dkCHgaGRiF").readPointer();
const getlocaly = new NativeFunction(Module.findExportByName("libqplay.so", "_ZNK10W6NzgawMJy10qCgWga1ADREv"), "double", ["pointer"]);
const getlocalx = new NativeFunction(Module.findExportByName("libqplay.so", "_ZNK10W6NzgawMJy10Qi2VgaCyrREv"), "double", ["pointer"]);
const putExplosion = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10tMaombuGXrEdddii"), "void", ["pointer", "double", "double", "double", "int", "int"]);
let hurtPlayer = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy"), "void", ["pointer", "double", "double", "double", "pointer", "pointer"]);
const setVarValue = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10G0gxgajWBw10gVHMMaRyAEERK10C8THgaTQxF"), "void", ["pointer", "pointer"]);

let canExplode = false
let explosionsInterval = null
let unhit = false
let wallhack = false
let showAdmins = true 
let autoOFF = false
let afkInterval = null

const alpha = createTString('alpha=0.5');
const zoom = createTString('zoom=1')

var saveVarsToArray = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10G0gxgajWBw10sbidMalVNaEv"), "pointer", ["pointer"]);

function getPlayerProperties(p) {
      let props = {
              "alpha": Memory.readFloat(ptr(p.toInt32() + 356)),
              "zoom": Memory.readFloat(p.add(0x138)),
              "x": Memory.readDouble(p.add(0x238)),
              "y": Memory.readDouble(p.add(0x240)),
              "nick": readTString(ptr(p.toInt32() + 464)),
              "account": readTString(ptr(p.toInt32() + 696))
      }
      return props
}

Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10CGk7IaA0MzEddb"), {
  'onLeave': function(ret) {
      if (wallhack) {
          ret.replace(0);
      }
  }
});

Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10MpGzgariDy10Q3v7IaUAWzERK10C8THgaTQxF"), {
  'onEnter': function(args) {
      if (autoOFF && args[0].toInt32() != activeplayer.toInt32()) {
        // AINDA PRECISAMOS IMPLEMENTAR UMA FORMA DE DESATIVAR OS BOTÕES VISUALMENTE
        showToast("Player apareceu. Cheats foram desativados.")
      }
      if (!showAdmins) return
      const accRgx = /^(pc\:|graal\d+|guest.*)/;
      const props = getPlayerProperties(args[0]);
      
      if (props.alpha < 0.5) setVarValue(args[0],alpha)
      if (props.zoom < 1) setVarValue(args[0],zoom)
     
      if (!props.account) return
      const account = props.account.toLowerCase()
      if (account == '') return
      
      if (!accRgx.test(account)) {
          if (showAdmins) {
              showToast('Admin: '+ account)
          }
      }
  }
});

Interceptor.replace(Module.findExportByName("libqplay.so", "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy"), new NativeCallback((a, b, c, d, e, f) => {
    if (unhit) return 0;
    hurtPlayer(a,b,c,d,e,f)
}, "void", ["pointer", "double", "double", "double", "pointer", "pointer"]))

function makeExplosion(level, radius){
    if (!level) return
    const playerX = getlocalx(activeplayer);
    const playerY = getlocaly(activeplayer);
    const offset = Math.floor(radius / 2);
    for (let i = 0; i < radius; i++){
        for (let j = 0; j < radius; j++){
            putExplosion(level, playerX + offset - i, playerY + offset - j, 1, 0, 1)
        }
    }
}

Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10iUxUgaX7aQEdd"), {
  onEnter: function(args) {
    if (!canExplode) return
    canExplode = false;
    makeExplosion(args[0], explosionRadius) 
  }
})

// Callbacks para as funções
const call_showAdmins = { on() { showAdmins = true }, off() { showAdmins = false } }
const call_explode = { // Renomeado de call_autoFarm
    on() {
        if (!explosionsInterval) {
            explosionsInterval = setInterval(() => { canExplode = true }, 1000)
        }
    },
    off() {
        if (explosionsInterval != null) {
            clearInterval(explosionsInterval)
            explosionsInterval = null
            canExplode = false
        }
    }
}
const call_antiAfk = {
    on() {
        if (!afkInterval) {
            afkInterval = setInterval(click, 240 * 1000)
        }
    },
    off() {
        if (afkInterval != null) {
            clearInterval(afkInterval)
            afkInterval = null
        }
    }
}
const call_unhit = { on() { unhit = true }, off() { unhit = false } }
const call_autoOFF = { on() { autoOFF = true }, off() { autoOFF = false } }
const call_wallhack = { on() { wallhack = true }, off() { wallhack = false } }

Java.perform(function () {
    Java.scheduleOnMainThread(function () {
        const classLoader = getClassLoader();
        const mainActivity = getMainActivity(classLoader);
        const Gravity = classLoader.Gravity;

        // Cores e Estilos
        const COLOR_OFF = classLoader.Color.parseColor("#80000000"); // Preto semi-transparente
        const COLOR_ON = classLoader.Color.parseColor("#80008000");  // Verde semi-transparente
        const PADDING = pixelDensityToPixels(mainActivity, 8);
        const MARGIN = pixelDensityToPixels(mainActivity, 2);

        // --- FUNÇÕES HELPER PARA CRIAR BOTÕES ---

        // Cria um botão de Ligar/Desligar
        function createToggleButton(text, callbacks, startOn = false) {
            const button = classLoader.TextView.$new(mainActivity);
            let isOn = startOn;
            
            button.setText(classLoader.String.$new(text));
            button.setTextColor(classLoader.Color.WHITE.value);
            button.setBackgroundColor(isOn ? COLOR_ON : COLOR_OFF);
            button.setPadding(PADDING, PADDING, PADDING, PADDING);
            
            const layoutParams = classLoader.LinearLayout_LayoutParams.$new(
                classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value,
                classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value
            );
            layoutParams.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
            button.setLayoutParams(layoutParams);

            button.setOnClickListener(Java.registerClass({
                name: "com.example.ClickListener" + Math.random().toString(36).substring(2),
                implements: [Java.use("android.view.View$OnClickListener")],
                methods: {
                    onClick(v) {
                        isOn = !isOn;
                        if (isOn) {
                            v.setBackgroundColor(COLOR_ON);
                            callbacks.on();
                        } else {
                            v.setBackgroundColor(COLOR_OFF);
                            callbacks.off();
                        }
                    }
                }
            }).$new());
            return button;
        }

        // Cria um botão que acelera ao ser segurado
        function createHoldButton(text, action) {
            const button = classLoader.TextView.$new(mainActivity);
            let holdInterval = null;

            button.setText(classLoader.String.$new(text));
            button.setTextColor(classLoader.Color.WHITE.value);
            button.setBackgroundColor(COLOR_OFF);
            button.setPadding(PADDING, PADDING, PADDING, PADDING);
            const layoutParams = classLoader.LinearLayout_LayoutParams.$new(
                classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value,
                classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value
            );
            layoutParams.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
            button.setLayoutParams(layoutParams);

            button.setOnTouchListener(Java.registerClass({
                name: "com.example.TouchListener" + Math.random().toString(36).substring(2),
                implements: [classLoader.View_OnTouchListener],
                methods: {
                    onTouch(v, event) {
                        switch (event.getAction()) {
                            case classLoader.MotionEvent.ACTION_DOWN.value:
                                action(); // Ação imediata no primeiro toque
                                holdInterval = setInterval(action, 100); // Repete a cada 100ms
                                return true;
                            case classLoader.MotionEvent.ACTION_UP.value:
                                if (holdInterval) clearInterval(holdInterval);
                                holdInterval = null;
                                return true;
                        }
                        return false;
                    }
                }
            }).$new());
            return button;
        }

        // --- MONTAGEM DA INTERFACE ---

        // 1. Layout Principal (a barra inteira)
        const mainBarLayout = classLoader.LinearLayout.$new(mainActivity);
        mainBarLayout.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);
        mainBarLayout.setGravity(Gravity.CENTER.value);
        mainBarLayout.setBackgroundColor(classLoader.Color.TRANSPARENT.value);
        const barLayoutParams = classLoader.LinearLayout_LayoutParams.$new(
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value,
            classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value
        );
        mainBarLayout.setLayoutParams(barLayoutParams);


        // 2. Layout para centralizar a barra no rodapé
        const rootLayout = classLoader.LinearLayout.$new(mainActivity);
        const rootParams = classLoader.LinearLayout_LayoutParams.$new(
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value,
            classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value
        );
        rootLayout.setLayoutParams(rootParams);
        rootLayout.setGravity(Gravity.CENTER_HORIZONTAL.value | Gravity.BOTTOM.value);
        rootLayout.addView(mainBarLayout);

        // 3. Adicionar os botões e paineis na ordem correta
        // [Auto Off] [Wall Hack] [Anti Afk]
        mainBarLayout.addView(createToggleButton("Auto Off", call_autoOFF));
        mainBarLayout.addView(createToggleButton("Wall Hack", call_wallhack));
        mainBarLayout.addView(createToggleButton("Anti Afk", call_antiAfk));

        // [Layout de Infos]
        const playerInfoLayout = classLoader.LinearLayout.$new(mainActivity);
        playerInfoLayout.setOrientation(classLoader.LinearLayout.VERTICAL.value);
        playerInfoLayout.setBackgroundColor(COLOR_OFF);
        playerInfoLayout.setPadding(PADDING, PADDING, PADDING, PADDING);
        const infoLayoutParams = classLoader.LinearLayout_LayoutParams.$new(
            classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value,
            classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value
        );
        infoLayoutParams.setMargins(MARGIN, MARGIN, MARGIN, MARGIN);
        playerInfoLayout.setLayoutParams(infoLayoutParams);
        
        const nameTextView = classLoader.TextView.$new(mainActivity); nameTextView.setTextColor(classLoader.Color.WHITE.value);
        const accountTextView = classLoader.TextView.$new(mainActivity); accountTextView.setTextColor(classLoader.Color.WHITE.value);
        const posTextView = classLoader.TextView.$new(mainActivity); posTextView.setTextColor(classLoader.Color.WHITE.value);
        
        playerInfoLayout.addView(nameTextView);
        playerInfoLayout.addView(accountTextView);
        playerInfoLayout.addView(posTextView);
        mainBarLayout.addView(playerInfoLayout);

        // Atualiza as informações a cada 500ms
        setInterval(() => {
            const props = getPlayerProperties(activeplayer);
            Java.scheduleOnMainThread(function() {
                nameTextView.setText(classLoader.String.$new("Nome: " + props.nick));
                accountTextView.setText(classLoader.String.$new("ID: " + props.account));
                posTextView.setText(classLoader.String.$new(`Pos: (${props.x.toFixed(2)}, ${props.y.toFixed(2)})`));
            });
        }, 500);

        // [Revelar ADM]
        mainBarLayout.addView(createToggleButton("Revelar ADM", call_showAdmins, true));

        // [Controle de Explosão: < | Texto | >]
        const explosionControlLayout = classLoader.LinearLayout.$new(mainActivity);
        explosionControlLayout.setOrientation(classLoader.LinearLayout.HORIZONTAL.value);
        explosionControlLayout.setGravity(Gravity.CENTER.value);
        
        const explosionRadiusText = createToggleButton(`Explodir: ${explosionRadius}`, call_explode);
        
        const updateRadiusText = () => {
            Java.scheduleOnMainThread(() => {
                explosionRadiusText.setText(classLoader.String.$new(`Explodir: ${explosionRadius}`));
            });
        };

        const decreaseAction = () => {
            explosionRadius = Math.max(1, explosionRadius - 1); // Não deixa ser menor que 1
            updateRadiusText();
        };
        const increaseAction = () => {
            explosionRadius = Math.min(100, explosionRadius + 1); // Não deixa ser maior que 100
            updateRadiusText();
        };
        
        const decreaseButton = createHoldButton("<", decreaseAction);
        const increaseButton = createHoldButton(">", increaseAction);

        explosionControlLayout.addView(decreaseButton);
        explosionControlLayout.addView(explosionRadiusText);
        explosionControlLayout.addView(increaseButton);
        mainBarLayout.addView(explosionControlLayout);

        // [Unhit]
        mainBarLayout.addView(createToggleButton("Unhit", call_unhit));

        // 4. Adiciona a interface inteira na tela
        mainActivity.addContentView(rootLayout, rootParams);
    })
})

//Zunz functions:
function getFunc(lib, func, type, params) {
  return new NativeFunction(Module.findExportByName(lib, func), type, params);
}

function createTString(str) {
  var str_pointer = malloc(4)
  var str_struct = malloc(str.length + 8)
  str_pointer.writePointer(str_struct)
  str_struct.writeInt(str.length)
  ptr(parseInt(str_struct) + 4).writeInt(1)
  ptr(parseInt(str_struct) + 8).writeUtf8String(str)
  return str_pointer

}

function readTString(str) {
  if (!str.isNull()) {
      if (parseInt(str) != 0) {
          var pstr = str.readPointer()
          if (!pstr.isNull()) {
              var strlen = pstr.readInt()
              if (strlen > 0) {
                  var strStart = parseInt(pstr) + 8
                  return ptr(strStart).readCString(strlen)
              }
          }
      }
  }
}

function click() {
    Java.perform(function () {
        Java.scheduleOnMainThread(function () {
            let timer7 = Java.use("android.os.SystemClock").uptimeMillis();
            let motionEvent = Java.use("android.view.MotionEvent").obtain(
                timer7,
                (timer7 + 50),
                Java.use("android.view.MotionEvent").ACTION_DOWN.value,
                1915,
                1945,
                0
            );
            
            getMainActivity(getClassLoader()).dispatchTouchEvent(motionEvent);
            console.log("clicked")
            
        });
    });
}

},5000)
