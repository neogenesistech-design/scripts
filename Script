//teste
setTimeout(()=>{
var malloc = getFunc("libc.so", "malloc", "pointer", ["int"])



function getClassLoader() {
    const classLoader = {
        Gravity: Java.use("android.view.Gravity"),
        TextView: Java.use("android.widget.TextView"),
        LinearLayout: Java.use("android.widget.LinearLayout"),
        ViewGroup_LayoutParams: Java.use("android.view.ViewGroup$LayoutParams"),
        LinearLayout_LayoutParams: Java.use("android.widget.LinearLayout$LayoutParams"),
        Color: Java.use("android.graphics.Color"),
        ActivityThread: Java.use("android.app.ActivityThread"),
        ActivityThread_ActivityClientRecord: Java.use("android.app.ActivityThread$ActivityClientRecord"),
        View_OnTouchListener: Java.use("android.view.View$OnTouchListener"),
        MotionEvent: Java.use("android.view.MotionEvent"),
        String: Java.use("java.lang.String"),
        ScrollView: Java.use("android.widget.ScrollView"),
        View_OnClickListener: Java.use("android.view.View$OnClickListener"),
        SeekBar: Java.use("android.widget.SeekBar") // Adicionando definição para SeekBar
    }
    return classLoader
}

function pixelDensityToPixels(context, dp) {
    const density = context.getResources().getDisplayMetrics().density.value
    return parseInt(dp * density)
}

function getMainActivity(classLoader) {
    const activityThread = classLoader.ActivityThread.sCurrentActivityThread.value
    const mActivities = activityThread.mActivities.value
    const activityClientRecord = Java.cast(mActivities.valueAt(0), classLoader.ActivityThread_ActivityClientRecord)
    return activityClientRecord.activity.value
}

function showToast(text, time = 1) {
  Java.perform(() => {
      Java.scheduleOnMainThread(function() {
          var toast = Java.use("android.widget.Toast");
          toast.makeText(Java.use("android.app.ActivityThread").currentApplication().getApplicationContext(), Java.use("java.lang.String").$new(text), time).show();
      });
  });
}

class Menu {
    #classLoader
    #activity
    #MATCH_PARENT
    #mainLayout
    #menuStart
    #menuLayout
    #menuBarLayout
    #menuBarTitle
    #menuScroll
    #menuOptions
    #options
    #contentView
    #WRAP_CONTENT
    #menuScrollLayout
    #menuScrollView
    #colorOn
    #colorOff


    constructor(classLoader, activity) {
        this.#classLoader = classLoader
        this.#activity = activity
        this.#MATCH_PARENT = classLoader.LinearLayout_LayoutParams.MATCH_PARENT.value
        this.#WRAP_CONTENT = classLoader.LinearLayout_LayoutParams.WRAP_CONTENT.value
        this.#options = {}
        this.#createContentView()
        this.#createMainLayout()
        this.#createMenuScroll()
    }

    #createContentView() {
        this.#contentView = this.#classLoader.LinearLayout.$new(this.#activity)
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#MATCH_PARENT)
        this.#contentView.setLayoutParams(layoutParams)
        this.#contentView.setGravity(this.#classLoader.Gravity.CENTER.value)
        this.#contentView.setBackgroundColor(this.#classLoader.Color.TRANSPARENT.value)
    }

    #createMainLayout() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT)
        this.#mainLayout = this.#classLoader.LinearLayout.$new(this.#activity)
        this.#mainLayout.setLayoutParams(layoutParams)
    }

    #createMenuScroll() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT)
        this.#menuScrollView = this.#classLoader.ScrollView.$new(this.#activity)
        const padding = pixelDensityToPixels(this.#activity, 8)
        this.#menuScrollView.setLayoutParams(layoutParams)
        this.#menuScrollView.setPadding(padding, padding, padding, padding)
        this.#menuScrollView.mFillViewport.value = true
    }

    #createMenuScrollLayout() {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT)
        this.#menuScrollLayout = this.#classLoader.LinearLayout.$new(this.#activity)
        this.#menuScrollLayout.setLayoutParams(layoutParams)
        this.#menuScrollLayout.setOrientation(this.#menuScrollLayout.VERTICAL.value)
    }

    createMenuOptionsLayout(colorOn, colorOff) {
        this.#createMenuScroll()
        this.#createMenuScrollLayout()
        this.#colorOn = colorOn
        this.#colorOff = colorOff
    }

    createMenuStart(title, size, color) {
        size = pixelDensityToPixels(this.#activity, size)
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT)
        this.#menuStart = this.#classLoader.TextView.$new(this.#activity)
        this.#menuStart.setLayoutParams(layoutParams)
        this.#menuStart.setText(this.#classLoader.String.$new(title))
        this.#menuStart.setTextSize(size)
        this.#menuStart.setTextColor(this.#classLoader.Color.parseColor(color))
        this.#menuStart.setBackgroundColor(this.#classLoader.Color.WHITE.value)
    }

    createMenuLayout(color, size) {
        const SIZE_DP = pixelDensityToPixels(this.#activity, size)
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(SIZE_DP, SIZE_DP)
        this.#menuLayout = this.#classLoader.LinearLayout.$new(this.#activity)
        this.#menuLayout.setLayoutParams(layoutParams)
        this.#menuLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color))
        this.#menuLayout.setOrientation(this.#menuLayout.VERTICAL.value)
    }

    createMenuBarLayout(color) {
        const padding = pixelDensityToPixels(this.#activity, 10)
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT)
        this.#menuBarLayout = this.#classLoader.LinearLayout.$new(this.#activity)
        this.#menuBarLayout.setLayoutParams(layoutParams)
        this.#menuBarLayout.setBackgroundColor(this.#classLoader.Color.parseColor(color))
        this.#menuBarLayout.setPadding(padding, padding, 0, padding)
    }

    createMenuBarTitle(title, color) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT)
        this.#menuBarTitle = this.#classLoader.TextView.$new(this.#activity)
        this.#menuBarTitle.setLayoutParams(layoutParams)
        this.#menuBarTitle.setText(this.#classLoader.String.$new(title))
        this.#menuBarTitle.setTextColor(this.#classLoader.Color.parseColor(color))
    }

    #drawContentView() {
        this.#activity.addContentView(this.#contentView, this.#contentView.getLayoutParams())
    }

    #drawMainLayout() {
        this.#contentView.addView(this.#mainLayout)
    }

    #drawMenuStart() {
        this.#mainLayout.addView(this.#menuStart)
    }

    #drawMenuLayout() {
        this.#mainLayout.addView(this.#menuLayout)
    }

    #drawMenuBarLayout() {
        this.#menuLayout.addView(this.#menuBarLayout)
    }

    #drawMenuBarTitle() {
        this.#menuBarLayout.addView(this.#menuBarTitle)
    }

    #drawMenuOptions() {
        this.#menuLayout.addView(this.#menuScrollView)
        this.#menuScrollView.addView(this.#menuScrollLayout)
    }

    #createOptionClickEvent(id, optionView, callbacks) {
        const classLoader = this.#classLoader
        let optionState = false
        const colorOn = this.#colorOn
        const colorOff = this.#colorOff
        const optionOnClickListener = Java.registerClass({
            name: "com.example." + id,
            implements: [classLoader.View_OnClickListener],
            methods: {
                onClick(p1) {
                    if (!optionState) {
                        p1.setBackgroundColor(classLoader.Color.parseColor(colorOn))
                        optionState = true
                        callbacks.on()
                    } else {
                        p1.setBackgroundColor(classLoader.Color.parseColor(colorOff))
                        optionState = false
                        callbacks.off()
                    }
                }
            }
        })
        optionView.setOnClickListener(optionOnClickListener.$new())
    }

    addOption(id, name, callbacks) {
    const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
    const padding = pixelDensityToPixels(this.#activity, 5);
    const option = this.#classLoader.TextView.$new(this.#activity);
    const margin = pixelDensityToPixels(this.#activity, 10);

    option.setText(this.#classLoader.String.$new(name));
    option.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
    option.setTextColor(this.#classLoader.Color.parseColor("#75757B"));
    layoutParams.setMargins(0, 0, 0, margin);
    option.setLayoutParams(layoutParams);
    option.setPadding(padding, padding, 0, padding);

    this.#menuScrollLayout.addView(option);
    this.#createOptionClickEvent(id, option, callbacks);

    // Armazena os callbacks no objeto de opções
    this.#options[id] = { callbacks, optionView: option };
}

    turnOffAllOptions() {
        for (const id in this.#options) {
            const { callbacks, optionView } = this.#options[id];
        // Altere o estado visual e chame o callback `off`
            optionView.setBackgroundColor(this.#classLoader.Color.parseColor(this.#colorOff));
            callbacks.off();
    }
}

    
    addText(text, textSize, textColor) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#WRAP_CONTENT, this.#WRAP_CONTENT);
        const margin = pixelDensityToPixels(this.#activity, 5);
        const textView = this.#classLoader.TextView.$new(this.#activity);

        textView.setText(this.#classLoader.String.$new(text));
        textView.setTextSize(textSize);
        textView.setTextColor(this.#classLoader.Color.parseColor(textColor));
        layoutParams.setMargins(0, 0, 0, margin);
        textView.setLayoutParams(layoutParams);

        this.#menuScrollLayout.addView(textView);
    }

    addSeekBar(textValue,initialValue, minValue, maxValue, callback) {
        const layoutParams = this.#classLoader.LinearLayout_LayoutParams.$new(this.#MATCH_PARENT, this.#WRAP_CONTENT);
        const margin = pixelDensityToPixels(this.#activity,1);
        const seekBar = this.#classLoader.SeekBar.$new(this.#activity, null, 0, Java.use("android.R$style").Widget_Holo_SeekBar.value);
        const textView = this.#classLoader.TextView.$new(this.#activity);
        seekBar.setMax(maxValue - minValue);
        seekBar.setProgress(0);
        layoutParams.setMargins(0, 0, 0, margin);
        seekBar.setLayoutParams(layoutParams);
        const text = Java.use("java.lang.String").$new(textValue+ " "+ initialValue);
        textView.setText(text)
        textView.setTextColor(this.#classLoader.Color.parseColor("#75757B"))
        seekBar.setProgress(initialValue);

        const SeekBarChangeListener = Java.use("android.widget.SeekBar$OnSeekBarChangeListener");
        const SeekBarChangeListenerImplementation = Java.registerClass({
            name: "com.example.SeekBarChangeListener" + Math.floor(Math.random() * 1000),
            implements: [SeekBarChangeListener],
            methods: {
                onProgressChanged(seekBar, progress, fromUser) {
                    const value = progress + minValue;
                    const text = Java.use("java.lang.String").$new(textValue+" "+value);

                    textView.setText(text);
                    callback(value,"move");
                },
                onStartTrackingTouch(seekBar) {
                    const progress = seekBar.getProgress()
                    const value = progress + minValue;
                    const text = Java.use("java.lang.String").$new(textValue+" "+value);

                    textView.setText(text);
                    callback(value,"start");

                },
                onStopTrackingTouch(seekBar) {
                    const progress = seekBar.getProgress()

                    const value = progress + minValue;
                    const text = Java.use("java.lang.String").$new(textValue+" "+value);

                    textView.setText(text);
                    callback(value,"end");
                }
            }
        });

        seekBar.setOnSeekBarChangeListener(SeekBarChangeListenerImplementation.$new());
        this.#menuScrollLayout.addView(textView);

        this.#menuScrollLayout.addView(seekBar);


        textView.setLayoutParams(layoutParams);
        textView.setGravity(this.#classLoader.Gravity.CENTER.value);
    }



    #createMainLayoutEvent() {
        const mainLayout = this.#mainLayout
        const menuLayout = this.#menuLayout
        const menuStart = this.#menuStart
        const classLoader = this.#classLoader
        let initialX = 0
        let initialY = 0
        let isMove = false
        let isMenuLayout = false
        let initialTouchTime = 0
        const MainLayoutOnTouchListener = Java.registerClass({
            name: "com.example.MainLayoutEvent",
            implements: [classLoader.View_OnTouchListener],
            methods: {
                onTouch(view, event) {
                const menuHeight = menuLayout.getHeight();
                    switch (event.getAction()) {
                        case classLoader.MotionEvent.ACTION_DOWN.value:
                            initialX = view.getX() - event.getRawX();
                            initialY = view.getY() - event.getRawY();
                            isMove = false
                            initialTouchTime = Date.now()
                            break
                        case classLoader.MotionEvent.ACTION_UP.value:
                            if (!isMove) {
                                if (!isMenuLayout) {
                                    const currentY = mainLayout.getY();
                                    const targetY = (currentY + menuHeight / 2) - menuStart.getHeight()/1.5;
                                    mainLayout.removeView(menuStart)
                                    mainLayout.addView(menuLayout)
                                    mainLayout.setY(targetY)
                                    isMenuLayout = true
                                } else {
                                     const currentY = mainLayout.getY();
                                    const targetY = (currentY - menuHeight / 2) + menuStart.getHeight()/1.5;
                                    mainLayout.removeView(menuLayout)
                                    mainLayout.addView(menuStart)
                                    mainLayout.setY(targetY)
                                    isMenuLayout = false
                                }
                            }
                            break
                        case classLoader.MotionEvent.ACTION_MOVE.value:
                            view.setX(event.getRawX() + initialX)
                            view.setY(event.getRawY() + initialY)
                            let deltaTime = Date.now() - initialTouchTime
                            if (deltaTime > 200) isMove = true
                            break
                        default:
                            return false
                    }
                    return true
                }
            }
        })
        this.#mainLayout.setOnTouchListener(MainLayoutOnTouchListener.$new())
    }

    start() {
        this.#drawContentView()
        this.#drawMainLayout()
        this.#drawMenuStart()
        this.#drawMenuBarLayout()
        this.#drawMenuBarTitle()
        this.#drawMenuOptions()
        this.#createMainLayoutEvent()
    }
}
let menu = null
const activeplayer = Module.findExportByName("libqplay.so", "dkCHgaGRiF").readPointer();
const getlocaly = new NativeFunction(Module.findExportByName("libqplay.so", "_ZNK10W6NzgawMJy10qCgWga1ADREv"), "double", ["pointer"]);
const getlocalx = new NativeFunction(Module.findExportByName("libqplay.so", "_ZNK10W6NzgawMJy10Qi2VgaCyrREv"), "double", ["pointer"]);
const putExplosion = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10tMaombuGXrEdddii"), "void", ["pointer", "double", "double", "double", "int", "int"]);
let hurtPlayer = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy"), "void", ["pointer", "double", "double", "double", "pointer", "pointer"]);
const setVarValue = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10G0gxgajWBw10gVHMMaRyAEERK10C8THgaTQxF"), "void", ["pointer", "pointer"]);

let canExplode = false

let explosionsInterval = null
let unhit = false
let wallhack = false
let showAdmins = false
let autoOFF = false

const alpha = createTString('alpha=0.5');
const zoom = createTString('zoom=1')

var saveVarsToArray = new NativeFunction(Module.findExportByName("libqplay.so", "_ZN10G0gxgajWBw10sbidMalVNaEv"), "pointer", ["pointer"]);


function getPlayerProperties(p) {
      let props = {
              "alpha": Memory.readFloat(ptr(p.toInt32() + 356)),
              "zoom": Memory.readFloat(p.add(0x138)),
              "x": Memory.readDouble(p.add(0x238)),
              "y": Memory.readDouble(p.add(0x240)),
              "nick": readTString(ptr(p.toInt32() + 464)),
              "account": readTString(ptr(p.toInt32() + 696))
      }
      return props
}
Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10CGk7IaA0MzEddb"), {
  'onLeave': function(ret) {
      if (wallhack) {
          ret.replace(0);
      }
  }
});

function getVars(varname, type) {
  let arrayInstance = saveVarsToArray(varname)
  let arrayLen = arrayInstance.add(0x8).readInt()
  let obj = {}
  if (arrayLen > 0) {
      let arrayIterator = arrayInstance.add(0x4).readPointer()
      let str = []
      for (let i = 0; i < arrayLen; i++) {
          str[i] = readTString(arrayIterator.add(i * 0x4).readPointer())
          const [key, value] = str[i].split('=');
          obj[key] = value;
      }
      if (type == "obj") {
          return obj
      } else {
          return str
      }
  }
  return null
}





Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10MpGzgariDy10Q3v7IaUAWzERK10C8THgaTQxF"), {
  'onEnter': function(args) {
      if (autoOFF && args[0].toInt32() != activeplayer.toInt32() && menu != null) {
      
        menu.turnOffAllOptions()
        showToast("Player appeared. All cheats have been turned off.")
      
      }
      if (!showAdmins) return
      const accRgx = /^(pc\:|graal\d+|guest.*)/;
      const props = getPlayerProperties(args[0]);
      
      if (props.alpha < 0.5) setVarValue(args[0],alpha)
      if (props.zoom < 1) setVarValue(args[0],zoom)
     
      if (!props.account) return
      const account = props.account.toLowerCase()
      if (account == '') return
      
      if (!accRgx.test(account)) {
          if (showAdmins) {
              showToast('Admin: '+ account)
          }
      }
  }
});

Interceptor.replace(Module.findExportByName("libqplay.so", "_ZN10W6NzgawMJy10iPzUgaQKcQEdddRK10C8THgaTQxFP10MpGzgariDy"), new NativeCallback((a, b, c, d, e, f) => {
          if (unhit) {
        return 0;
      }
      hurtPlayer(a,b,c,d,e,f)
}, "void", ["pointer", "double", "double", "double", "pointer", "pointer"]))

function makeExplosion(level){
    if (!level) return console.log("TServerLevel não recebido")
      const playerX = getlocalx(activeplayer);
      const playerY = getlocaly(activeplayer);
      for (let i = 0; i < 80; i++){
          for (let j = 0; j < 80; j++){
              putExplosion(level,playerX+40-i,playerY+40-j,1,0,1)
          }
      }
}

Interceptor.attach(Module.findExportByName("libqplay.so", "_ZN10zF9VgaBKxR10iUxUgaX7aQEdd"), {
  onEnter: function(args) {
      if (!canExplode) return
      canExplode = false;
      makeExplosion(args[0])
  }
})

const call_showAdmins = {
    on() {
        showAdmins = true
    },
    off() {
        showAdmins = false
    }
}

const call_autoFarm = {
    on() {
        if (!explosionsInterval) {
        
            
            explosionsInterval = setInterval(() => { canExplode = true },1000)
        }
    },
    off() {
        if (explosionsInterval != null) {
            clearInterval(explosionsInterval)
            explosionsInterval = null
            canExplode = false
        }
    }
}
let afkInterval = null
const call_antiAfk = {
    on() {
        if (!afkInterval) {
            afkInterval = setInterval(click,240*1000)
        }
    },
    off() {
        if (afkInterval != null) {
            clearInterval(afkInterval)
            afkInterval = null
        }
    }
}

const call_unhit = {
    on() {
        unhit = true
    },
    off() {
        unhit = false
    }
}

const call_autoOFF = {
    on() {
        autoOFF = true
    },
    off() {
        autoOFF = false
    }
}


const call_wallhack = {
    on() {
        wallhack = true
    },
    off() {
        wallhack = false
    }
}

Java.perform(function () {
    Java.scheduleOnMainThread(function () {
        const classLoader = getClassLoader()
        const mainActivity = getMainActivity(classLoader)
        menu = new Menu(classLoader, mainActivity)
        //set name and color that will appear with the menu minimized.
        menu.createMenuStart("MENU", 15, "#006400")
        //set menu layout color and size
        menu.createMenuLayout("#18122B", 180)
        //set cor bar color
        menu.createMenuBarLayout("#635985")
        //name and name color
        menu.createMenuBarTitle("EngModMobile", "#FFC107")
        //set color of on and off options.
        menu.createMenuOptionsLayout("#443C68", "#393053")
        //id, name and object with on and off functions
        menu.addOption("antiAfk","Anti AFK",call_antiAfk)
        menu.addOption("autoOFF", "auto Off", call_autoOFF)
        menu.addOption("showAdmins", "Show admins", call_showAdmins)
        menu.addOption("autoFarm", "Auto Farm", call_autoFarm)
        menu.addOption("unhit", "unhit", call_unhit)
        menu.addOption("wallhack", "Wallhack", call_wallhack)

       
        menu.start()
    })
})

//Zunz functions:
function getFunc(lib, func, type, params) {
  return new NativeFunction(Module.findExportByName(lib, func), type, params);
}

function createTString(str) {
  var str_pointer = malloc(4)
  var str_struct = malloc(str.length + 8)
  str_pointer.writePointer(str_struct)
  str_struct.writeInt(str.length)
  ptr(parseInt(str_struct) + 4).writeInt(1)
  ptr(parseInt(str_struct) + 8).writeUtf8String(str)
  return str_pointer

}

function readTString(str) {
  if (!str.isNull()) {
      if (parseInt(str) != 0) {
          var pstr = str.readPointer()
          if (!pstr.isNull()) {
              var strlen = pstr.readInt()
              if (strlen > 0) {
                  var strStart = parseInt(pstr) + 8
                  return ptr(strStart).readCString(strlen)
              }
          }
      }
  }
}




function click() {
    Java.perform(function () {
        Java.scheduleOnMainThread(function () {
            let timer7 = Java.use("android.os.SystemClock").uptimeMillis(); // Corrected: Removed the trailing comma
            let motionEvent = Java.use("android.view.MotionEvent").obtain(
                timer7,
                (timer7 + 50),
                Java.use("android.view.MotionEvent").ACTION_DOWN.value,
                1915,
                1945,
                0
            );
            
            getMainActivity(getClassLoader()).dispatchTouchEvent(motionEvent);
            console.log("clicked")
            
        });
    });
}


},5000)
